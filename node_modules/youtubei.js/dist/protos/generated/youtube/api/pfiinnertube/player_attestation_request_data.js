// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.29.2
// source: youtube/api/pfiinnertube/player_attestation_request_data.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "youtube.api.pfiinnertube";
function createBasePlayerAttestationRequestData() {
    return { iosguardRequest: undefined, omitBotguardData: undefined };
}
export const PlayerAttestationRequestData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.iosguardRequest !== undefined) {
            PlayerAttestationRequestData_IosguardChallengeRequestData.encode(message.iosguardRequest, writer.uint32(10).fork()).join();
        }
        if (message.omitBotguardData !== undefined) {
            writer.uint32(16).bool(message.omitBotguardData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerAttestationRequestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.iosguardRequest = PlayerAttestationRequestData_IosguardChallengeRequestData.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.omitBotguardData = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlayerAttestationRequestData_IosguardChallengeRequestData() {
    return { challengeRequest: undefined };
}
export const PlayerAttestationRequestData_IosguardChallengeRequestData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.challengeRequest !== undefined) {
            writer.uint32(10).bytes(message.challengeRequest);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerAttestationRequestData_IosguardChallengeRequestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.challengeRequest = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
//# sourceMappingURL=player_attestation_request_data.js.map