"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  CTL: () => CTL,
  OggDemuxer: () => OggDemuxer,
  OpusDecoder: () => OpusDecoder,
  OpusEncoder: () => OpusEncoder,
  OpusStream: () => OpusStream,
  WebmDemuxer: () => WebmDemuxer,
  addLibopusProvider: () => addLibopusProvider,
  removeLibopusProvider: () => removeLibopusProvider,
  setLibopusProvider: () => setLibopusProvider,
  version: () => version
});
module.exports = __toCommonJS(src_exports);

// src/OggDemuxer.ts
var import_node_stream = require("stream");
var OGG_PAGE_HEADER_SIZE = 26;
var STREAM_STRUCTURE_VERSION = 0;
var charCode = /* @__PURE__ */ __name((x) => x.charCodeAt(0), "charCode");
var OGGS_HEADER = Buffer.from([..."OggS"].map(charCode));
var OPUS_HEAD = Buffer.from([..."OpusHead"].map(charCode));
var OPUS_TAGS = Buffer.from([..."OpusTags"].map(charCode));
var _OggDemuxer = class _OggDemuxer extends import_node_stream.Transform {
  /**
   * Creates a new OggOpus demuxer.
   * @param {Object} [options] options that you would pass to a regular Transform stream.
   * @memberof opus
   */
  constructor(options = {}) {
    super(Object.assign({ readableObjectMode: true }, options));
    __publicField(this, "_remainder", null);
    __publicField(this, "_head", null);
    __publicField(this, "_bitstream", null);
    this._remainder = null;
    this._head = null;
    this._bitstream = null;
  }
  _transform(chunk, encoding, done) {
    if (this._remainder) {
      chunk = Buffer.concat([this._remainder, chunk]);
      this._remainder = null;
    }
    try {
      while (chunk) {
        const result = this._readPage(chunk);
        if (result) chunk = result;
        else
          break;
      }
    } catch (error) {
      done(error);
      return;
    }
    this._remainder = chunk;
    done();
  }
  /**
   * Reads a page from a buffer
   * @private
   * @param {Buffer} chunk the chunk containing the page
   * @returns {boolean|Buffer} if a buffer, it will be a slice of the excess data of the original, otherwise it will be
   * false and would indicate that there is not enough data to go ahead with reading this page.
   */
  _readPage(chunk) {
    if (chunk.length < OGG_PAGE_HEADER_SIZE) {
      return false;
    }
    if (!chunk.subarray(0, 4).equals(OGGS_HEADER)) {
      throw Error(`capture_pattern is not ${OGGS_HEADER}`);
    }
    if (chunk.readUInt8(4) !== STREAM_STRUCTURE_VERSION) {
      throw Error(
        `stream_structure_version is not ${STREAM_STRUCTURE_VERSION}`
      );
    }
    if (chunk.length < 27) return false;
    const pageSegments = chunk.readUInt8(26);
    if (chunk.length < 27 + pageSegments) return false;
    const table = chunk.subarray(27, 27 + pageSegments);
    const bitstream = chunk.readUInt32BE(14);
    const sizes = [];
    let totalSize = 0;
    for (let i = 0; i < pageSegments; ) {
      let size = 0, x = 255;
      while (x === 255) {
        if (i >= table.length) return false;
        x = table.readUInt8(i);
        i++;
        size += x;
      }
      sizes.push(size);
      totalSize += size;
    }
    if (chunk.length < 27 + pageSegments + totalSize) return false;
    let start = 27 + pageSegments;
    for (const size of sizes) {
      const segment = chunk.subarray(start, start + size);
      const header = segment.subarray(0, 8);
      if (this._head) {
        if (header.equals(OPUS_TAGS)) this.emit("tags", segment);
        else if (this._bitstream === bitstream) this.push(segment);
      } else if (header.equals(OPUS_HEAD)) {
        this.emit("head", segment);
        this._head = segment;
        this._bitstream = bitstream;
      } else {
        this.emit("unknownSegment", segment);
      }
      start += size;
    }
    return chunk.subarray(start);
  }
  _destroy(err, cb) {
    this._cleanup();
    return cb ? cb(err) : void 0;
  }
  _final(cb) {
    this._cleanup();
    cb();
  }
  /**
   * Cleans up the demuxer when it is no longer required.
   * @private
   */
  _cleanup() {
    this._remainder = null;
    this._head = null;
    this._bitstream = null;
  }
};
__name(_OggDemuxer, "OggDemuxer");
var OggDemuxer = _OggDemuxer;

// src/OpusEncoder.ts
var import_node_stream2 = require("stream");
var loadModule = /* @__PURE__ */ __name((modules) => {
  const errors = [];
  for (const [name, fn] of modules) {
    try {
      return {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        ...fn(require(name)),
        name
      };
    } catch (e) {
      errors.push(`Failed to load ${name}: ${e}`);
      continue;
    }
  }
  throw new Error(
    `Could not load opus module, tried ${modules.length} different modules. Errors: ${errors.join("\n")}`
  );
}, "loadModule");
var CTL = {
  BITRATE: 4002,
  FEC: 4012,
  PLP: 4014
};
var OPUS_MOD_REGISTRY = [
  [
    "mediaplex",
    (mod) => {
      if (!mod.OpusEncoder) throw new Error("Unsupported mediaplex version");
      return { Encoder: mod.OpusEncoder };
    }
  ],
  ["@discordjs/opus", (opus) => ({ Encoder: opus.OpusEncoder })],
  ["opusscript", (opus) => ({ Encoder: opus })],
  [
    "@evan/opus",
    (opus) => {
      const { Encoder, Decoder } = opus;
      const _OpusEncoder2 = class _OpusEncoder2 {
        constructor(_rate, _channels, _application) {
          this._rate = _rate;
          this._channels = _channels;
          this._application = _application;
          __publicField(this, "_encoder");
          __publicField(this, "_decoder");
        }
        _ensureEncoder() {
          if (this._encoder) return;
          this._encoder = new Encoder({
            channels: this._channels,
            sample_rate: this._rate,
            application: {
              2048: "voip",
              2049: "audio",
              2051: "restricted_lowdelay"
            }[this._application]
          });
        }
        _ensureDecoder() {
          if (this._decoder) return;
          this._decoder = new Decoder({
            channels: this._channels,
            sample_rate: this._rate
          });
        }
        encode(buffer) {
          this._ensureEncoder();
          return Buffer.from(this._encoder.encode(buffer));
        }
        decode(buffer) {
          this._ensureDecoder();
          return Buffer.from(this._decoder.decode(buffer));
        }
        applyEncoderCTL(ctl, value) {
          this._ensureEncoder();
          this._encoder.ctl(ctl, value);
        }
        delete() {
          this._encoder = null;
          this._decoder = null;
        }
      };
      __name(_OpusEncoder2, "OpusEncoder");
      let OpusEncoder2 = _OpusEncoder2;
      return { Encoder: OpusEncoder2 };
    }
  ],
  ["node-opus", (opus) => ({ Encoder: opus.OpusEncoder })]
];
var Opus = {};
var addLibopusProvider = /* @__PURE__ */ __name((provider) => {
  if (OPUS_MOD_REGISTRY.some(([, fn]) => fn === provider[1])) return;
  OPUS_MOD_REGISTRY.push(provider);
}, "addLibopusProvider");
var removeLibopusProvider = /* @__PURE__ */ __name((name) => {
  const index = OPUS_MOD_REGISTRY.findIndex((o) => o[0] === name);
  if (index === -1) return false;
  OPUS_MOD_REGISTRY.splice(index, 1);
  return true;
}, "removeLibopusProvider");
var setLibopusProvider = /* @__PURE__ */ __name((provider, name) => {
  Opus = { Encoder: provider, name };
}, "setLibopusProvider");
function loadOpus(refresh = false) {
  if (Opus.Encoder && !refresh) return Opus;
  Opus = loadModule(OPUS_MOD_REGISTRY);
  return Opus;
}
__name(loadOpus, "loadOpus");
var charCode2 = /* @__PURE__ */ __name((x) => x.charCodeAt(0), "charCode");
var OPUS_HEAD2 = Buffer.from([..."OpusHead"].map(charCode2));
var OPUS_TAGS2 = Buffer.from([..."OpusTags"].map(charCode2));
var _OpusStream = class _OpusStream extends import_node_stream2.Transform {
  /**
   * Creates a new Opus transformer.
   * @private
   * @memberof opus
   * @param {Object} [options] options that you would pass to a regular Transform stream
   */
  constructor(options = {}) {
    if (!loadOpus().Encoder) {
      throw Error(
        `Could not find an Opus module! Please install one of ${OPUS_MOD_REGISTRY.map(
          (o) => o[0]
        ).join(", ")}.`
      );
    }
    super(Object.assign({ readableObjectMode: true }, options));
    __publicField(this, "encoder", null);
    __publicField(this, "_options");
    __publicField(this, "_required");
    const lib = Opus;
    if (lib.name === "opusscript") {
      options.application = lib.Encoder.Application[options.application];
    }
    this.encoder = new lib.Encoder(
      options.rate,
      options.channels,
      options.application
    );
    this._options = options;
    this._required = this._options.frameSize * this._options.channels * 2;
  }
  _encode(buffer) {
    if (Opus.name === "opusscript") {
      return this.encoder.encode(buffer, this._options.frameSize);
    } else {
      return this.encoder.encode(buffer);
    }
  }
  _decode(buffer) {
    if (Opus.name === "opusscript") {
      return this.encoder.decode(buffer, this._options.frameSize);
    } else {
      return this.encoder.decode(buffer);
    }
  }
  /**
   * Returns the Opus module being used - `mediaplex`, `opusscript`, `node-opus`, or `@discordjs/opus`.
   * @type {string}
   * @readonly
   * @example
   * console.log(`Using Opus module ${OpusEncoder.type}`);
   */
  static get type() {
    return Opus.name;
  }
  /**
   * Sets the bitrate of the stream.
   * @param {number} bitrate the bitrate to use use, e.g. 48000
   * @public
   */
  setBitrate(bitrate) {
    (this.encoder.applyEncoderCTL || this.encoder.encoderCTL).apply(
      this.encoder,
      [CTL.BITRATE, Math.min(128e3, Math.max(16e3, bitrate))]
    );
  }
  /**
   * Enables or disables forward error correction.
   * @param {boolean} enabled whether or not to enable FEC.
   * @public
   */
  setFEC(enabled) {
    (this.encoder.applyEncoderCTL || this.encoder.encoderCTL).apply(
      this.encoder,
      [CTL.FEC, enabled ? 1 : 0]
    );
  }
  /**
   * Sets the expected packet loss over network transmission.
   * @param {number} [percentage] a percentage (represented between 0 and 1)
   */
  setPLP(percentage) {
    (this.encoder.applyEncoderCTL || this.encoder.encoderCTL).apply(
      this.encoder,
      [CTL.PLP, Math.min(100, Math.max(0, percentage * 100))]
    );
  }
  _final(cb) {
    this._cleanup();
    cb();
  }
  _destroy(err, cb) {
    this._cleanup();
    return cb ? cb(err) : void 0;
  }
  /**
   * Cleans up the Opus stream when it is no longer needed
   * @private
   */
  _cleanup() {
    if (typeof this.encoder?.delete === "function") this.encoder.delete();
    this.encoder = null;
  }
};
__name(_OpusStream, "OpusStream");
var OpusStream = _OpusStream;
var _OpusEncoder = class _OpusEncoder extends OpusStream {
  /**
   * Creates a new Opus encoder stream.
   * @memberof opus
   * @param {Object} options options that you would pass to a regular OpusStream, plus a few more:
   * @param {number} options.frameSize the frame size in bytes to use (e.g. 960 for stereo audio at 48KHz with a frame
   * duration of 20ms)
   * @param {number} options.channels the number of channels to use
   * @param {number} options.rate the sampling rate in Hz
   */
  constructor(options = {}) {
    super(options);
    __publicField(this, "_buffer", Buffer.allocUnsafe(0));
  }
  _transform(newChunk, encoding, done) {
    const chunk = Buffer.concat([this._buffer, newChunk]);
    let i = 0;
    while (chunk.length >= i + this._required) {
      const pcm = chunk.slice(i, i + this._required);
      let opus;
      try {
        opus = this.encoder.encode(pcm);
      } catch (error) {
        done(error);
        return;
      }
      this.push(opus);
      i += this._required;
    }
    if (i > 0) this._buffer = chunk.slice(i);
    done();
  }
  _destroy(err, cb) {
    super._destroy(err, cb);
    this._buffer = Buffer.allocUnsafe(0);
  }
};
__name(_OpusEncoder, "OpusEncoder");
var OpusEncoder = _OpusEncoder;
var _OpusDecoder = class _OpusDecoder extends OpusStream {
  _transform(chunk, encoding, done) {
    const signature = chunk.slice(0, 8);
    if (chunk.length >= 8 && signature.equals(OPUS_HEAD2)) {
      this.emit("format", {
        channels: this._options.channels,
        sampleRate: this._options.rate,
        bitDepth: 16,
        float: false,
        signed: true,
        version: chunk.readUInt8(8),
        preSkip: chunk.readUInt16LE(10),
        gain: chunk.readUInt16LE(16)
      });
      return done();
    }
    if (chunk.length >= 8 && signature.equals(OPUS_TAGS2)) {
      this.emit("tags", chunk);
      return done();
    }
    try {
      this.push(this._decode(chunk));
    } catch (e) {
      return done(e);
    }
    return done();
  }
};
__name(_OpusDecoder, "OpusDecoder");
var OpusDecoder = _OpusDecoder;

// src/WebmBase.ts
var import_node_stream3 = require("stream");
var _WebmBaseDemuxer = class _WebmBaseDemuxer extends import_node_stream3.Transform {
  /**
   * Creates a new Webm demuxer.
   * @param {Object} [options] options that you would pass to a regular Transform stream.
   */
  constructor(options = {}) {
    super(Object.assign({ readableObjectMode: true }, options));
    __publicField(this, "_remainder", null);
    __publicField(this, "_length", 0);
    __publicField(this, "_count", 0);
    __publicField(this, "_skipUntil", null);
    __publicField(this, "_track", null);
    __publicField(this, "_incompleteTrack", {});
    __publicField(this, "_ebmlFound", false);
    this._remainder = null;
    this._length = 0;
    this._count = 0;
    this._skipUntil = null;
    this._track = null;
    this._incompleteTrack = {};
    this._ebmlFound = false;
  }
  _checkHead(data) {
  }
  _transform(chunk, encoding, done) {
    this._length += chunk.length;
    if (this._remainder) {
      chunk = Buffer.concat([this._remainder, chunk]);
      this._remainder = null;
    }
    let offset = 0;
    if (this._skipUntil && this._length > this._skipUntil) {
      offset = this._skipUntil - this._count;
      this._skipUntil = null;
    } else if (this._skipUntil) {
      this._count += chunk.length;
      done();
      return;
    }
    let result;
    while (result !== _WebmBaseDemuxer.TOO_SHORT) {
      try {
        result = this._readTag(chunk, offset);
      } catch (error) {
        done(error);
        return;
      }
      if (result === _WebmBaseDemuxer.TOO_SHORT) break;
      if (result._skipUntil) {
        this._skipUntil = result._skipUntil;
        break;
      }
      if (result.offset) offset = result.offset;
      else
        break;
    }
    this._count += offset;
    this._remainder = chunk.subarray(offset);
    done();
    return;
  }
  /**
   * Reads an EBML ID from a buffer.
   * @private
   * @param {Buffer} chunk the buffer to read from.
   * @param {number} offset the offset in the buffer.
   * @returns {Object|Symbol} contains an `id` property (buffer) and the new `offset` (number).
   * Returns the TOO_SHORT symbol if the data wasn't big enough to facilitate the request.
   */
  _readEBMLId(chunk, offset) {
    const idLength = vintLength(chunk, offset);
    if (idLength === _WebmBaseDemuxer.TOO_SHORT)
      return _WebmBaseDemuxer.TOO_SHORT;
    return {
      id: chunk.subarray(offset, offset + idLength),
      offset: offset + idLength
    };
  }
  /**
   * Reads a size variable-integer to calculate the length of the data of a tag.
   * @private
   * @param {Buffer} chunk the buffer to read from.
   * @param {number} offset the offset in the buffer.
   * @returns {Object|Symbol} contains property `offset` (number), `dataLength` (number) and `sizeLength` (number).
   * Returns the TOO_SHORT symbol if the data wasn't big enough to facilitate the request.
   */
  _readTagDataSize(chunk, offset) {
    const sizeLength = vintLength(chunk, offset);
    if (sizeLength === _WebmBaseDemuxer.TOO_SHORT)
      return _WebmBaseDemuxer.TOO_SHORT;
    const dataLength = expandVint(chunk, offset, offset + sizeLength);
    return { offset: offset + sizeLength, dataLength, sizeLength };
  }
  /**
   * Takes a buffer and attempts to read and process a tag.
   * @private
   * @param {Buffer} chunk the buffer to read from.
   * @param {number} offset the offset in the buffer.
   * @returns {Object|Symbol} contains the new `offset` (number) and optionally the `_skipUntil` property,
   * indicating that the stream should ignore any data until a certain length is reached.
   * Returns the TOO_SHORT symbol if the data wasn't big enough to facilitate the request.
   */
  _readTag(chunk, offset) {
    const idData = this._readEBMLId(chunk, offset);
    if (idData === _WebmBaseDemuxer.TOO_SHORT) return _WebmBaseDemuxer.TOO_SHORT;
    const ebmlID = idData.id.toString("hex");
    if (!this._ebmlFound) {
      if (ebmlID === "1a45dfa3") this._ebmlFound = true;
      else
        throw Error("Did not find the EBML tag at the start of the stream");
    }
    offset = idData.offset;
    const sizeData = this._readTagDataSize(chunk, offset);
    if (sizeData === _WebmBaseDemuxer.TOO_SHORT)
      return _WebmBaseDemuxer.TOO_SHORT;
    const { dataLength } = sizeData;
    offset = sizeData.offset;
    if (typeof _WebmBaseDemuxer.TAGS[ebmlID] === "undefined") {
      if (chunk.length > offset + dataLength) {
        return { offset: offset + dataLength };
      }
      return {
        offset,
        _skipUntil: this._count + offset + dataLength
      };
    }
    const tagHasChildren = _WebmBaseDemuxer.TAGS[ebmlID];
    if (tagHasChildren) {
      return { offset };
    }
    if (offset + dataLength > chunk.length)
      return _WebmBaseDemuxer.TOO_SHORT;
    const data = chunk.subarray(
      offset,
      offset + dataLength
    );
    if (!this._track) {
      if (ebmlID === "ae") this._incompleteTrack = {};
      if (ebmlID === "d7") this._incompleteTrack.number = data[0];
      if (ebmlID === "83") this._incompleteTrack.type = data[0];
      if (this._incompleteTrack.type === 2 && typeof this._incompleteTrack.number !== "undefined") {
        this._track = this._incompleteTrack;
      }
    }
    if (ebmlID === "63a2") {
      this._checkHead(data);
      this.emit("head", data);
    } else if (ebmlID === "a3") {
      if (!this._track) throw Error("No audio track in this webm!");
      if ((data[0] & 15) === this._track.number) {
        this.push(data.subarray(4));
      }
    }
    return { offset: offset + dataLength };
  }
  _destroy(err, cb) {
    this._cleanup();
    return cb ? cb(err) : void 0;
  }
  _final(cb) {
    this._cleanup();
    cb();
  }
  /**
   * Cleans up the demuxer when it is no longer required.
   * @private
   */
  _cleanup() {
    this._remainder = null;
    this._incompleteTrack = {};
  }
};
__name(_WebmBaseDemuxer, "WebmBaseDemuxer");
__publicField(_WebmBaseDemuxer, "TAGS", {
  // value is true if the element has children
  "1a45dfa3": true,
  // EBML
  "18538067": true,
  // Segment
  "1f43b675": true,
  // Cluster
  "1654ae6b": true,
  // Tracks
  ae: true,
  // TrackEntry
  d7: false,
  // TrackNumber
  "83": false,
  // TrackType
  a3: false,
  // SimpleBlock
  "63a2": false
});
__publicField(_WebmBaseDemuxer, "TOO_SHORT", Symbol("TOO_SHORT"));
var WebmBaseDemuxer = _WebmBaseDemuxer;
function vintLength(buffer, index) {
  if (index < 0 || index > buffer.length - 1) {
    return WebmBaseDemuxer.TOO_SHORT;
  }
  let i = 0;
  for (; i < 8; i++) if (1 << 7 - i & buffer[index]) break;
  i++;
  if (index + i > buffer.length) {
    return WebmBaseDemuxer.TOO_SHORT;
  }
  return i;
}
__name(vintLength, "vintLength");
function expandVint(buffer, start, end) {
  const length = vintLength(buffer, start);
  if (end > buffer.length || length === WebmBaseDemuxer.TOO_SHORT)
    return WebmBaseDemuxer.TOO_SHORT;
  const mask = (1 << 8 - length) - 1;
  let value = buffer[start] & mask;
  for (let i = start + 1; i < end; i++) {
    value = (value << 8) + buffer[i];
  }
  return value;
}
__name(expandVint, "expandVint");

// src/WebmDemuxer.ts
var OPUS_HEAD3 = Buffer.from([..."OpusHead"].map((x) => x.charCodeAt(0)));
var _WebmDemuxer = class _WebmDemuxer extends WebmBaseDemuxer {
  _checkHead(data) {
    if (!data.subarray(0, 8).equals(OPUS_HEAD3)) {
      throw Error("Audio codec is not Opus!");
    }
  }
};
__name(_WebmDemuxer, "WebmDemuxer");
var WebmDemuxer = _WebmDemuxer;

// src/version.ts
var version = (
  /* @__MACRO__ getVersion */
  "7.1.0"
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CTL,
  OggDemuxer,
  OpusDecoder,
  OpusEncoder,
  OpusStream,
  WebmDemuxer,
  addLibopusProvider,
  removeLibopusProvider,
  setLibopusProvider,
  version
});
//# sourceMappingURL=data:application/json;base64,