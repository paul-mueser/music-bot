"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  FFmpeg: () => FFmpeg,
  changeFFmpegFlags: () => changeFFmpegFlags,
  createFFmpegArgs: () => createFFmpegArgs,
  version: () => version
});
module.exports = __toCommonJS(src_exports);

// src/FFmpeg.ts
var import_node_child_process = require("child_process");
var import_node_stream = require("stream");
var VERSION_REGEX = /version (.+) Copyright/im;
var validatePathParam = /* @__PURE__ */ __name((path, displayName) => {
  if (!path) throw new Error(`Failed to resolve ${displayName}`);
  return path;
}, "validatePathParam");
var _FFmpeg = class _FFmpeg extends import_node_stream.Duplex {
  /**
   * Create FFmpeg duplex stream
   * @param options Options to initialize ffmpeg
   * @example ```typescript
   * const ffmpeg = new FFmpeg({
   *   args: [
   *     '-analyzeduration', '0',
   *     '-loglevel', '0',
   *     '-f', 's16le',
   *     '-ar', '48000',
   *     '-ac', '2',
   *     '-af', 'bass=g=10,acompressor'
   *   ]
   * });
   *
   * const pcm = input.pipe(ffmpeg);
   *
   * pcm.pipe(fs.createWriteStream('./audio.pcm'));
   * ```
   */
  constructor(options = {}) {
    super(options);
    /**
     * Current FFmpeg process
     */
    __publicField(this, "process");
    this.process = _FFmpeg.spawn(options);
    const EVENTS = {
      readable: this._reader,
      data: this._reader,
      end: this._reader,
      unpipe: this._reader,
      finish: this._writer,
      drain: this._writer
    };
    this._readableState = this._reader._readableState;
    this._writableState = this._writer._writableState;
    this._copy(["write", "end"], this._writer);
    this._copy(["read", "setEncoding", "pipe", "unpipe"], this._reader);
    for (const method of [
      "on",
      "once",
      "removeListener",
      "removeAllListeners",
      "listeners"
    ]) {
      this[method] = (ev, fn) => (
        // @ts-expect-error
        EVENTS[ev] ? (
          // @ts-expect-error
          EVENTS[ev][method](ev, fn)
        ) : (
          // @ts-expect-error
          import_node_stream.Duplex.prototype[method].call(this, ev, fn)
        )
      );
    }
    const processError = /* @__PURE__ */ __name((error) => this.emit("error", error), "processError");
    this._reader.on("error", processError);
    this._writer.on("error", processError);
  }
  /**
   * Checks if FFmpeg is loaded.
   */
  static isLoaded() {
    return _FFmpeg.cached != null;
  }
  /**
   * Adds a new FFmpeg source.
   * @param source FFmpeg source
   */
  static addSource(source) {
    if (_FFmpeg.sources.some((s) => s.name === source.name)) return false;
    _FFmpeg.sources.push(source);
    return true;
  }
  /**
   * Removes a FFmpeg source.
   * @param source FFmpeg source
   */
  static removeSource(source) {
    const index = _FFmpeg.sources.findIndex((s) => s.name === source.name);
    if (index === -1) return false;
    _FFmpeg.sources.splice(index, 1);
    return true;
  }
  /**
   * Resolves FFmpeg path. Throws an error if it fails to resolve.
   * @param force if it should relocate the command
   */
  static resolve(force = false) {
    if (!force && _FFmpeg.cached) return _FFmpeg.cached;
    const errors = [];
    for (const source of _FFmpeg.sources) {
      try {
        let path;
        if (source.module) {
          const mod = require(source.name);
          path = validatePathParam(
            mod.default?.path || mod.path || mod,
            source.name
          );
        } else {
          path = source.name;
        }
        const result = (0, import_node_child_process.spawnSync)(path, ["-v"], { windowsHide: true });
        const resolved = {
          result: result.stdout.toString(),
          command: path,
          module: source.module,
          name: source.name,
          path,
          version: VERSION_REGEX.exec(result.stderr.toString())?.[1] ?? "unknown"
        };
        _FFmpeg.cached = resolved;
        errors.length = 0;
        return resolved;
      } catch (e) {
        const err = e && e instanceof Error ? e.message : `${e}`;
        const msg = `Failed to load ffmpeg using ${source.module ? `require('${source.name}')` : `spawn('${source.name}')`}. Error: ${err}`;
        errors.push(msg);
      }
    }
    throw new Error(`Could not load ffmpeg. Errors:
${errors.join("\n")}`);
  }
  /**
   * Resolves FFmpeg path safely. Returns null if it fails to resolve.
   * @param force if it should relocate the command
   */
  static resolveSafe(force = false) {
    try {
      return _FFmpeg.resolve(force);
    } catch {
      return null;
    }
  }
  /**
   * Spawns ffmpeg process
   * @param options Spawn options
   */
  static spawn({ args = [], shell = false } = {}) {
    if (!args.includes("-i")) args.unshift("-i", "-");
    return (0, import_node_child_process.spawn)(_FFmpeg.resolve().command, args.concat(["pipe:1"]), {
      windowsHide: true,
      shell
    });
  }
  get _reader() {
    return this.process.stdout;
  }
  get _writer() {
    return this.process.stdin;
  }
  _copy(methods, target) {
    for (const method of methods) {
      this[method] = target[method].bind(target);
    }
  }
  _destroy(err, cb) {
    this._cleanup();
    if (cb) return cb(err);
  }
  _final(cb) {
    this._cleanup();
    cb();
  }
  _cleanup() {
    if (this.process) {
      this.once("error", () => {
      });
      this.process.kill("SIGKILL");
      this.process = null;
    }
  }
};
__name(_FFmpeg, "FFmpeg");
/**
 * Cached FFmpeg source.
 */
__publicField(_FFmpeg, "cached", null);
/**
 * Supported FFmpeg sources.
 */
__publicField(_FFmpeg, "sources", [
  // paths
  { name: "ffmpeg", module: false },
  { name: "./ffmpeg", module: false },
  { name: "avconv", module: false },
  { name: "./avconv", module: false },
  // modules
  { name: "ffmpeg-static", module: true },
  { name: "@ffmpeg-installer/ffmpeg", module: true },
  { name: "@node-ffmpeg/node-ffmpeg-installer", module: true },
  { name: "ffmpeg-binaries", module: true }
]);
var FFmpeg = _FFmpeg;

// src/common.ts
function changeFFmpegFlags(oldFlags, newFlags) {
  const updatedFlags = [...oldFlags];
  for (let i = 0; i < newFlags.length; i++) {
    const key = newFlags[i];
    const value = newFlags[i + 1];
    const oldIndex = updatedFlags.indexOf(key);
    if (oldIndex !== -1) {
      if (value && !value.startsWith("-")) {
        updatedFlags[oldIndex + 1] = value;
        i++;
      } else {
        updatedFlags.splice(oldIndex, 1);
      }
    } else {
      if (value && !value.startsWith("-")) {
        updatedFlags.push(key, value);
        i++;
      } else {
        updatedFlags.push(key);
      }
    }
  }
  return updatedFlags;
}
__name(changeFFmpegFlags, "changeFFmpegFlags");

// src/version.ts
var version = (
  /* @__MACRO__ getVersion */
  "7.1.0"
);

// src/index.ts
var createFFmpegArgs = /* @__PURE__ */ __name((input, post) => {
  const args = [];
  for (const [key, value] of Object.entries(input)) {
    if (value == null) continue;
    args.push(`-${key}`, String(value));
  }
  if (post) {
    Array.isArray(post) ? args.push(...post) : args.push(post);
  }
  return args;
}, "createFFmpegArgs");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FFmpeg,
  changeFFmpegFlags,
  createFFmpegArgs,
  version
});
//# sourceMappingURL=data:application/json;base64,