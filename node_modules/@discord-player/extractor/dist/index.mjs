var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/extractors/SoundCloudExtractor.ts
import {
  BaseExtractor,
  Playlist,
  QueryType,
  Track,
  Util
} from "discord-player";
import * as SoundCloud from "soundcloud.ts";

// src/internal/helper.ts
import unfetch from "isomorphic-unfetch";
var UA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.49";
var fetch = unfetch;
function filterSoundCloudPreviews(tracks) {
  const filtered = tracks.filter((t) => {
    if (typeof t.policy === "string") return t.policy.toUpperCase() === "ALLOW";
    return !(t.duration === 3e4 && t.full_duration > 3e4);
  });
  const result = filtered.length > 0 ? filtered : tracks;
  return result;
}
__name(filterSoundCloudPreviews, "filterSoundCloudPreviews");

// src/extractors/SoundCloudExtractor.ts
var _SoundCloudExtractor = class _SoundCloudExtractor extends BaseExtractor {
  constructor() {
    super(...arguments);
    __publicField(this, "internal", new SoundCloud.default({
      clientId: this.options.clientId,
      oauthToken: this.options.oauthToken,
      proxy: this.options.proxy
    }));
  }
  async activate() {
    this.protocols = ["scsearch", "soundcloud"];
    _SoundCloudExtractor.instance = this;
  }
  async deactivate() {
    this.protocols = [];
    _SoundCloudExtractor.instance = null;
  }
  async validate(query, type) {
    if (typeof query !== "string") return false;
    return [
      QueryType.SOUNDCLOUD,
      QueryType.SOUNDCLOUD_PLAYLIST,
      QueryType.SOUNDCLOUD_SEARCH,
      QueryType.SOUNDCLOUD_TRACK,
      QueryType.AUTO,
      QueryType.AUTO_SEARCH
    ].some((r) => r === type);
  }
  async getRelatedTracks(track, history) {
    if (track.queryType === QueryType.SOUNDCLOUD_TRACK) {
      const data = await this.internal.tracks.relatedV2(track.url, 5);
      const unique = filterSoundCloudPreviews(data).filter(
        (t) => !history.tracks.some((h) => h.url === t.permalink_url)
      );
      return this.createResponse(
        null,
        (unique.length > 0 ? unique : data).map((trackInfo) => {
          const newTrack = new Track(this.context.player, {
            title: trackInfo.title,
            url: trackInfo.permalink_url,
            duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),
            description: trackInfo.description ?? "",
            thumbnail: trackInfo.artwork_url,
            views: trackInfo.playback_count,
            author: trackInfo.user.username,
            requestedBy: track.requestedBy,
            source: "soundcloud",
            engine: trackInfo,
            queryType: QueryType.SOUNDCLOUD_TRACK,
            metadata: trackInfo,
            requestMetadata: /* @__PURE__ */ __name(async () => {
              return trackInfo;
            }, "requestMetadata"),
            cleanTitle: trackInfo.title
          });
          newTrack.extractor = this;
          return newTrack;
        })
      );
    }
    return this.createResponse();
  }
  async handle(query, context) {
    if (context.protocol === "scsearch")
      context.type = QueryType.SOUNDCLOUD_SEARCH;
    switch (context.type) {
      case QueryType.SOUNDCLOUD_TRACK: {
        const trackInfo = await this.internal.tracks.getV2(query).catch(Util.noop);
        if (!trackInfo) return this.emptyResponse();
        const track = new Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.permalink_url,
          duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),
          description: trackInfo.description ?? "",
          thumbnail: trackInfo.artwork_url,
          views: trackInfo.playback_count,
          author: trackInfo.user.username,
          requestedBy: context.requestedBy,
          source: "soundcloud",
          engine: trackInfo,
          queryType: context.type,
          metadata: trackInfo,
          requestMetadata: /* @__PURE__ */ __name(async () => {
            return trackInfo;
          }, "requestMetadata"),
          cleanTitle: trackInfo.title
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      case QueryType.SOUNDCLOUD_PLAYLIST: {
        const data = await this.internal.playlists.getV2(query).catch(Util.noop);
        if (!data) return { playlist: null, tracks: [] };
        const res = new Playlist(this.context.player, {
          title: data.title,
          description: data.description ?? "",
          thumbnail: data.artwork_url ?? data.tracks[0].artwork_url,
          type: "playlist",
          source: "soundcloud",
          author: {
            name: data.user.username,
            url: data.user.permalink_url
          },
          tracks: [],
          id: `${data.id}`,
          url: data.permalink_url,
          rawPlaylist: data
        });
        for (const song of data.tracks) {
          const track = new Track(this.context.player, {
            title: song.title,
            description: song.description ?? "",
            author: song.user.username,
            url: song.permalink_url,
            thumbnail: song.artwork_url,
            duration: Util.buildTimeCode(Util.parseMS(song.duration)),
            views: song.playback_count,
            requestedBy: context.requestedBy,
            playlist: res,
            source: "soundcloud",
            engine: song,
            queryType: context.type,
            metadata: song,
            requestMetadata: /* @__PURE__ */ __name(async () => {
              return song;
            }, "requestMetadata"),
            cleanTitle: song.title
          });
          track.extractor = this;
          track.playlist = res;
          res.tracks.push(track);
        }
        return { playlist: res, tracks: res.tracks };
      }
      default: {
        let tracks = await this.internal.tracks.searchV2({ q: query }).then((t) => t.collection).catch(Util.noop);
        if (!tracks)
          tracks = await this.internal.tracks.searchAlt(query).catch(Util.noop);
        if (!tracks || !tracks.length) return this.emptyResponse();
        tracks = filterSoundCloudPreviews(tracks);
        const resolvedTracks = [];
        for (const trackInfo of tracks) {
          if (!trackInfo.streamable) continue;
          const track = new Track(this.context.player, {
            title: trackInfo.title,
            url: trackInfo.permalink_url,
            duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),
            description: trackInfo.description ?? "",
            thumbnail: trackInfo.artwork_url,
            views: trackInfo.playback_count,
            author: trackInfo.user.username,
            requestedBy: context.requestedBy,
            source: "soundcloud",
            engine: trackInfo,
            queryType: "soundcloudTrack",
            metadata: trackInfo,
            requestMetadata: /* @__PURE__ */ __name(async () => {
              return trackInfo;
            }, "requestMetadata")
          });
          track.extractor = this;
          resolvedTracks.push(track);
        }
        return { playlist: null, tracks: resolvedTracks };
      }
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const url = await this.internal.util.streamLink(info.url).catch(Util.noop);
    if (!url)
      throw new Error("Could not extract stream from this track source");
    return url;
  }
  async bridge(track, sourceExtractor) {
    if (sourceExtractor?.identifier === this.identifier) {
      return this.stream(track);
    }
    const query = sourceExtractor?.createBridgeQuery(track) ?? `${track.author} - ${track.title}`;
    const info = await this.handle(query, {
      requestedBy: track.requestedBy,
      type: QueryType.SOUNDCLOUD_SEARCH
    });
    if (!info.tracks.length) return null;
    const result = await this.stream(info.tracks[0]);
    if (result) {
      track.bridgedTrack = info.tracks[0];
      track.bridgedExtractor = this;
    }
    return result;
  }
};
__name(_SoundCloudExtractor, "SoundCloudExtractor");
__publicField(_SoundCloudExtractor, "identifier", "com.discord-player.soundcloudextractor");
__publicField(_SoundCloudExtractor, "instance", null);
var SoundCloudExtractor = _SoundCloudExtractor;

// src/extractors/LyricsExtractor.ts
function lyricsExtractor() {
  throw new Error(
    "Legacy lyrics extractor has been removed. Please use the new lyrics api from `player.lyrics` instead. It offers more accurate result and features like plain lyrics and synced lyrics."
  );
}
__name(lyricsExtractor, "lyricsExtractor");

// src/extractors/VimeoExtractor.ts
import {
  BaseExtractor as BaseExtractor2,
  QueryType as QueryType2,
  Track as Track2,
  Util as Util2
} from "discord-player";

// src/internal/Vimeo.ts
import http from "http";
import https from "https";
var _Vimeo = class _Vimeo {
  constructor() {
    throw new Error(
      `The ${this.constructor.name} class may not be instantiated!`
    );
  }
  /**
   * @typedef {Readable} Readable
   */
  /**
   * Downloads from vimeo
   * @param {number} id Vimeo video id
   * @returns {Promise<Readable>}
   */
  static download(id) {
    return new Promise(async (resolve) => {
      const info = await _Vimeo.getInfo(id);
      if (!info) return null;
      const downloader = info.stream.startsWith("https://") ? https : http;
      downloader.get(info.stream, (res) => {
        resolve(res);
      });
    });
  }
  /**
   * Returns video info
   * @param {number} id Video id
   */
  static async getInfo(id) {
    if (!id) throw new Error("Invalid id");
    const url = `https://player.vimeo.com/video/${id}`;
    try {
      const res = await fetch(url);
      const data = await res.text();
      const json = JSON.parse(
        data.split("window.playerConfig =")[1].split(";")[0].trim()
      );
      const obj = {
        id: json.video.id,
        duration: json.video.duration * 1e3,
        title: json.video.title,
        url: json.video.url,
        thumbnail: json.video.thumbs["1280"] || json.video.thumbs.base,
        stream: json.request.files.progressive[0].url,
        author: {
          id: json.video.owner.id,
          name: json.video.owner.name,
          url: json.video.owner.url,
          avatar: json.video.owner.img_2x || json.video.owner.img
        }
      };
      return obj;
    } catch {
      return null;
    }
  }
};
__name(_Vimeo, "Vimeo");
var Vimeo = _Vimeo;

// src/extractors/VimeoExtractor.ts
var _VimeoExtractor = class _VimeoExtractor extends BaseExtractor2 {
  async validate(query, type) {
    if (typeof query !== "string") return false;
    return [QueryType2.VIMEO].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case QueryType2.VIMEO: {
        const trackInfo = await Vimeo.getInfo(
          query.split("/").filter((x) => !!x).pop()
        ).catch(Util2.noop);
        if (!trackInfo) return this.emptyResponse();
        const track = new Track2(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: Util2.buildTimeCode(Util2.parseMS(trackInfo.duration || 0)),
          description: `${trackInfo.title} by ${trackInfo.author.name}`,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author.name,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.stream,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    if (engine) {
      return engine;
    }
    const track = await Vimeo.getInfo(info.url).catch(Util2.noop);
    if (!track || !track.stream)
      throw new Error("Could not extract stream from this source");
    info.raw.engine = {
      streamURL: track.stream
    };
    return track.stream;
  }
};
__name(_VimeoExtractor, "VimeoExtractor");
__publicField(_VimeoExtractor, "identifier", "com.discord-player.vimeoextractor");
var VimeoExtractor = _VimeoExtractor;

// src/extractors/ReverbnationExtractor.ts
import {
  BaseExtractor as BaseExtractor3,
  QueryType as QueryType3,
  Track as Track3,
  Util as Util3
} from "discord-player";
import reverbnation from "reverbnation-scraper";
var _ReverbnationExtractor = class _ReverbnationExtractor extends BaseExtractor3 {
  async validate(query, type) {
    if (typeof query !== "string") return false;
    return [QueryType3.REVERBNATION].some(
      (r) => r === type
    );
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case QueryType3.REVERBNATION: {
        const trackInfo = await reverbnation.getInfo(query).catch(Util3.noop);
        if (!trackInfo) return this.emptyResponse();
        const track = new Track3(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: Util3.buildTimeCode(Util3.parseMS(trackInfo.duration)),
          description: trackInfo.lyrics || `${trackInfo.title} by ${trackInfo.artist.name}`,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.artist.name,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.streamURL,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    if (engine) {
      return engine;
    }
    const track = await reverbnation.getInfo(info.url).catch(Util3.noop);
    if (!track || !track.streamURL)
      throw new Error("Could not extract stream from this source");
    info.raw.engine = {
      streamURL: track.streamURL
    };
    return track.streamURL;
  }
};
__name(_ReverbnationExtractor, "ReverbnationExtractor");
__publicField(_ReverbnationExtractor, "identifier", "com.discord-player.reverbnationextractor");
var ReverbnationExtractor = _ReverbnationExtractor;

// src/extractors/AttachmentExtractor.ts
import {
  BaseExtractor as BaseExtractor4,
  QueryType as QueryType4,
  Track as Track4,
  Util as Util4
} from "discord-player";
import { createReadStream, existsSync } from "fs";

// src/internal/downloader.ts
import http2 from "http";
import https2 from "https";
function downloadStream(url, opts = {}) {
  return new Promise((resolve, reject) => {
    const lib = url.startsWith("http://") ? http2 : https2;
    lib.get(url, opts, (res) => resolve(res)).once("error", reject);
  });
}
__name(downloadStream, "downloadStream");

// src/extractors/AttachmentExtractor.ts
import * as fileType from "file-type";
import path from "path";
import { stat } from "fs/promises";
var ATTACHMENT_HEADER = ["audio/", "video/", "application/ogg"];
var _AttachmentExtractor = class _AttachmentExtractor extends BaseExtractor4 {
  constructor() {
    super(...arguments);
    // use lowest priority to avoid conflict with other extractors
    __publicField(this, "priority", 0);
  }
  async validate(query, type) {
    if (typeof query !== "string") return false;
    return [QueryType4.ARBITRARY, QueryType4.FILE].some(
      (r) => r === type
    );
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case QueryType4.ARBITRARY: {
        const data = await downloadStream(
          query,
          context.requestOptions
        );
        if (!ATTACHMENT_HEADER.some(
          (r) => !!data.headers["content-type"]?.startsWith(r)
        ))
          return this.emptyResponse();
        const trackInfo = {
          title: (query.split("/").filter((x) => x.length).pop() ?? "Attachment").split("?")[0].trim(),
          duration: 0,
          thumbnail: "https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png",
          engine: query,
          // eslint-disable-next-line
          author: data.client?.servername || "Attachment",
          // eslint-disable-next-line
          description: data.client?.servername || "Attachment",
          url: data.url || query
        };
        try {
          const mediaplex = __require("mediaplex");
          const timeout = this.context.player.options.probeTimeout ?? 5e3;
          const { result, stream } = await Promise.race(
            [
              mediaplex.probeStream(data),
              new Promise((_, r) => {
                setTimeout(() => r(new Error("Timeout")), timeout);
              })
            ]
          );
          if (result) {
            trackInfo.duration = result.duration * 1e3;
            const metadata = mediaplex.readMetadata(result);
            if (metadata.author) trackInfo.author = metadata.author;
            if (metadata.title) trackInfo.title = metadata.title;
            trackInfo.description = `${trackInfo.title} by ${trackInfo.author}`;
          }
          stream.destroy();
        } catch {
        }
        const track = new Track4(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: Util4.buildTimeCode(Util4.parseMS(trackInfo.duration)),
          description: trackInfo.description,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.url,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        track.raw.isFile = false;
        return { playlist: null, tracks: [track] };
      }
      case QueryType4.FILE: {
        if (!existsSync(query)) return this.emptyResponse();
        const fstat = await stat(query);
        if (!fstat.isFile()) return this.emptyResponse();
        const mime = await fileType.fromFile(query).catch(() => null);
        if (!mime || !ATTACHMENT_HEADER.some((r) => !!mime.mime.startsWith(r)))
          return this.emptyResponse();
        const trackInfo = {
          title: path.basename(query) || "Attachment",
          duration: 0,
          thumbnail: "https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png",
          engine: query,
          author: "Attachment",
          description: "Attachment",
          url: query
        };
        try {
          const mediaplex = __require("mediaplex");
          const timeout = this.context.player.options.probeTimeout ?? 5e3;
          const { result, stream } = await Promise.race(
            [
              mediaplex.probeStream(
                createReadStream(query, {
                  start: 0,
                  end: 1024 * 1024 * 10
                })
              ),
              new Promise((_, r) => {
                setTimeout(() => r(new Error("Timeout")), timeout);
              })
            ]
          );
          if (result) {
            trackInfo.duration = result.duration * 1e3;
            const metadata = mediaplex.readMetadata(result);
            if (metadata.author) trackInfo.author = metadata.author;
            if (metadata.title) trackInfo.title = metadata.title;
            trackInfo.description = `${trackInfo.title} by ${trackInfo.author}`;
          }
          stream.destroy();
        } catch {
        }
        const track = new Track4(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: Util4.buildTimeCode(Util4.parseMS(trackInfo.duration)),
          description: trackInfo.description,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.url,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        track.raw.isFile = true;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    const isFile = info.raw.isFile;
    if (!engine) throw new Error("Could not find stream source");
    if (!isFile) {
      return engine;
    }
    return createReadStream(engine);
  }
};
__name(_AttachmentExtractor, "AttachmentExtractor");
__publicField(_AttachmentExtractor, "identifier", "com.discord-player.attachmentextractor");
var AttachmentExtractor = _AttachmentExtractor;

// src/extractors/AppleMusicExtractor.ts
import {
  Playlist as Playlist2,
  QueryType as QueryType5,
  Track as Track5,
  Util as Util5,
  BaseExtractor as BaseExtractor5
} from "discord-player";

// src/internal/index.ts
var internal_exports = {};
__export(internal_exports, {
  AppleMusic: () => AppleMusic,
  SpotifyAPI: () => SpotifyAPI,
  Vimeo: () => Vimeo,
  downloadStream: () => downloadStream
});

// src/internal/AppleMusic.ts
import { QueryResolver } from "discord-player";
import { parse } from "node-html-parser";
function getHTML(link) {
  return fetch(link, {
    headers: {
      "User-Agent": UA
    }
  }).then((r) => r.text()).then(
    (txt) => parse(txt),
    () => null
  );
}
__name(getHTML, "getHTML");
function makeImage({
  height,
  url,
  width,
  ext = "jpg"
}) {
  return url.replace("{w}", `${width}`).replace("{h}", `${height}`).replace("{f}", ext);
}
__name(makeImage, "makeImage");
function parseDuration(d) {
  const r = /* @__PURE__ */ __name((name, unit) => `((?<${name}>-?\\d*[\\.,]?\\d+)${unit})?`, "r");
  const regex = new RegExp(
    [
      "(?<negative>-)?P",
      r("years", "Y"),
      r("months", "M"),
      r("weeks", "W"),
      r("days", "D"),
      "(T",
      r("hours", "H"),
      r("minutes", "M"),
      r("seconds", "S"),
      ")?"
      // end optional time
    ].join("")
  );
  const test = regex.exec(d);
  if (!test || !test.groups) return "0:00";
  const dur = [
    test.groups.years,
    test.groups.months,
    test.groups.weeks,
    test.groups.days,
    test.groups.hours,
    test.groups.minutes,
    test.groups.seconds
  ];
  return dur.filter((r2, i, a) => !!r2 || i > a.length - 2).map((m, i) => {
    if (!m) m = "0";
    return i < 1 ? m : m.padStart(2, "0");
  }).join(":") || "0:00";
}
__name(parseDuration, "parseDuration");
var _AppleMusic = class _AppleMusic {
  constructor() {
    return _AppleMusic;
  }
  static async search(query) {
    try {
      const url = `https://music.apple.com/us/search?term=${encodeURIComponent(
        query
      )}`;
      const node = await getHTML(url);
      if (!node) return [];
      const rawData = node.getElementById("serialized-server-data");
      if (!rawData) return [];
      const data = JSON.parse(rawData.innerText)[0].data.sections;
      const tracks = data.find((s) => s.itemKind === "trackLockup")?.items;
      if (!tracks) return [];
      return tracks.map((track) => ({
        id: track.contentDescriptor.identifiers.storeAdamID,
        duration: track.duration || "0:00",
        title: track.title,
        url: track.contentDescriptor.url,
        thumbnail: track?.artwork?.dictionary ? makeImage({
          url: track.artwork.dictionary.url,
          height: track.artwork.dictionary.height,
          width: track.artwork.dictionary.width
        }) : "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: track.subtitleLinks?.[0]?.title ?? "Unknown Artist"
        }
      }));
    } catch {
      return [];
    }
  }
  static async getSongInfoFallback(res, name, id, link) {
    try {
      const metaTags = res.getElementsByTagName("meta");
      if (!metaTags.length) return null;
      const title = metaTags.find((r) => r.getAttribute("name") === "apple:title")?.getAttribute("content") || res.querySelector("title")?.innerText || name;
      const contentId = metaTags.find((r) => r.getAttribute("name") === "apple:content_id")?.getAttribute("content") || id;
      const durationRaw = metaTags.find((r) => r.getAttribute("property") === "music:song:duration")?.getAttribute("content");
      const song = {
        id: contentId,
        duration: durationRaw ? parseDuration(durationRaw) : metaTags.find((m) => m.getAttribute("name") === "apple:description")?.textContent.split("Duration: ")?.[1].split('"')?.[0] || "0:00",
        title,
        url: link,
        thumbnail: metaTags.find(
          (r) => ["og:image:secure_url", "og:image"].includes(
            r.getAttribute("property")
          )
        )?.getAttribute("content") || "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: res.querySelector(".song-subtitles__artists>a")?.textContent?.trim() || "Apple Music"
        }
      };
      return song;
    } catch {
      return null;
    }
  }
  static async getSongInfo(link) {
    if (!QueryResolver.regex.appleMusicSongRegex.test(link)) {
      return null;
    }
    const url = new URL(link);
    const id = url.searchParams.get("i");
    const name = url.pathname.split("album/")[1]?.split("/")[0];
    if (!id || !name) return null;
    const res = await getHTML(`https://music.apple.com/us/song/${name}/${id}`);
    if (!res) return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split(
        '<script type="application/json" id="serialized-server-data">'
      )?.[1]?.split("</script>")?.[0];
      if (!datasrc) throw "not found";
      const data = JSON.parse(datasrc)[0].data.seoData;
      const song = data.ogSongs[0]?.attributes;
      return {
        id: data.ogSongs[0]?.id || data.appleContentId || id,
        duration: song?.durationInMillis || "0:00",
        title: song?.name || data.appleTitle,
        url: song?.url || data.url || link,
        thumbnail: song?.artwork ? makeImage({
          url: song.artwork.url,
          height: song.artwork.height,
          width: song.artwork.width
        }) : data.artworkUrl ? makeImage({
          height: data.height,
          width: data.width,
          url: data.artworkUrl,
          ext: data.fileType || "jpg"
        }) : "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: song?.artistName || data.socialTitle || "Apple Music"
        }
      };
    } catch {
      return this.getSongInfoFallback(res, name, id, link);
    }
  }
  static async getPlaylistInfo(link) {
    if (!QueryResolver.regex.appleMusicPlaylistRegex.test(link)) {
      return null;
    }
    const res = await getHTML(link);
    if (!res) return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split(
        '<script type="application/json" id="serialized-server-data">'
      )?.[1]?.split("</script>")?.[0];
      if (!datasrc) throw "not found";
      const pl = JSON.parse(datasrc)[0].data.seoData;
      const thumbnail = pl.artworkUrl ? makeImage({
        height: pl.height,
        width: pl.width,
        url: pl.artworkUrl,
        ext: pl.fileType || "jpg"
      }) : "https://music.apple.com/assets/favicon/favicon-180.png";
      return {
        id: pl.appleContentId,
        title: pl.appleTitle,
        thumbnail,
        artist: {
          name: pl.ogSongs?.[0]?.attributes?.artistName || "Apple Music"
        },
        url: pl.url,
        tracks: (
          // eslint-disable-next-line
          pl.ogSongs?.map((m) => {
            const song = m.attributes;
            return {
              id: m.id,
              duration: song.durationInMillis || "0:00",
              title: song.name,
              url: song.url,
              thumbnail: song.artwork ? makeImage({
                url: song.artwork.url,
                height: song.artwork.height,
                width: song.artwork.width
              }) : thumbnail,
              artist: {
                name: song.artistName || "Apple Music"
              }
            };
          }) || []
        )
      };
    } catch {
      return null;
    }
  }
  static async getAlbumInfo(link) {
    if (!QueryResolver.regex.appleMusicAlbumRegex.test(link)) {
      return null;
    }
    const res = await getHTML(link);
    if (!res) return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split(
        '<script type="application/json" id="serialized-server-data">'
      )?.[1]?.split("</script>")?.[0];
      if (!datasrc) throw "not found";
      const pl = JSON.parse(datasrc)[0].data.seoData;
      const thumbnail = pl.artworkUrl ? makeImage({
        height: pl.height,
        width: pl.width,
        url: pl.artworkUrl,
        ext: pl.fileType || "jpg"
      }) : "https://music.apple.com/assets/favicon/favicon-180.png";
      return {
        id: pl.appleContentId,
        title: pl.appleTitle,
        thumbnail,
        artist: {
          name: pl.ogSongs?.[0]?.attributes?.artistName || "Apple Music"
        },
        url: pl.url,
        tracks: (
          // eslint-disable-next-line
          pl.ogSongs?.map((m) => {
            const song = m.attributes;
            return {
              id: m.id,
              duration: song.durationInMillis || "0:00",
              title: song.name,
              url: song.url,
              thumbnail: song.artwork ? makeImage({
                url: song.artwork.url,
                height: song.artwork.height,
                width: song.artwork.width
              }) : thumbnail,
              artist: {
                name: song.artistName || "Apple Music"
              }
            };
          }) || []
        )
      };
    } catch {
      return null;
    }
  }
};
__name(_AppleMusic, "AppleMusic");
var AppleMusic = _AppleMusic;

// src/internal/Spotify.ts
var SP_ANON_TOKEN_URL = "https://open.spotify.com/get_access_token?reason=transport&productType=embed";
var SP_ACCESS_TOKEN_URL = "https://accounts.spotify.com/api/token?grant_type=client_credentials";
var SP_BASE = "https://api.spotify.com/v1";
var _SpotifyAPI = class _SpotifyAPI {
  constructor(credentials = {
    clientId: null,
    clientSecret: null
  }) {
    this.credentials = credentials;
    __publicField(this, "accessToken", null);
  }
  get authorizationKey() {
    if (!this.credentials.clientId || !this.credentials.clientSecret)
      return null;
    return Buffer.from(
      `${this.credentials.clientId}:${this.credentials.clientSecret}`
    ).toString("base64");
  }
  async requestToken() {
    const key = this.authorizationKey;
    if (!key) return await this.requestAnonymousToken();
    try {
      const res = await fetch(SP_ACCESS_TOKEN_URL, {
        method: "POST",
        headers: {
          "User-Agent": UA,
          Authorization: `Basic ${key}`,
          "Content-Type": "application/json"
        }
      });
      const body = await res.json();
      if (!body.access_token) throw "no token";
      const data = {
        token: body.access_token,
        expiresAfter: body.expires_in,
        type: "Bearer"
      };
      return this.accessToken = data;
    } catch {
      return await this.requestAnonymousToken();
    }
  }
  async requestAnonymousToken() {
    try {
      const res = await fetch(SP_ANON_TOKEN_URL, {
        headers: {
          "User-Agent": UA,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok) throw "not_ok";
      const body = await res.json();
      if (!body.accessToken) throw "no_access_token";
      const data = {
        token: body.accessToken,
        expiresAfter: body.accessTokenExpirationTimestampMs,
        type: "Bearer"
      };
      return this.accessToken = data;
    } catch {
      return null;
    }
  }
  isTokenExpired() {
    if (!this.accessToken) return true;
    return Date.now() > this.accessToken.expiresAfter;
  }
  async search(query) {
    try {
      if (this.isTokenExpired()) await this.requestToken();
      if (!this.accessToken) return null;
      const res = await fetch(
        `${SP_BASE}/search/?q=${encodeURIComponent(
          query
        )}&type=track&market=US`,
        {
          headers: {
            "User-Agent": UA,
            Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
            "Content-Type": "application/json"
          }
        }
      );
      if (!res.ok) return null;
      const data = await res.json();
      return data.tracks.items.map((m) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: m.album.images?.[0]?.url || null
      }));
    } catch {
      return null;
    }
  }
  async getPlaylist(id) {
    try {
      if (this.isTokenExpired()) await this.requestToken();
      if (!this.accessToken) return null;
      const res = await fetch(`${SP_BASE}/playlists/${id}?market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok) return null;
      const data = await res.json();
      if (!data.tracks.items.length) return null;
      const t = data.tracks.items;
      let next = data.tracks.next;
      while (typeof next === "string") {
        try {
          const res2 = await fetch(next, {
            headers: {
              "User-Agent": UA,
              Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
              "Content-Type": "application/json"
            }
          });
          if (!res2.ok) break;
          const nextPage = await res2.json();
          t.push(...nextPage.items);
          next = nextPage.next;
          if (!next) break;
        } catch {
          break;
        }
      }
      const tracks = t.map(({ track: m }) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: m.album.images?.[0]?.url || null
      }));
      if (!tracks.length) return null;
      return {
        name: data.name,
        author: data.owner.display_name,
        thumbnail: data.images?.[0]?.url || null,
        id: data.id,
        url: data.external_urls.spotify || `https://open.spotify.com/playlist/${id}`,
        tracks
      };
    } catch {
      return null;
    }
  }
  async getAlbum(id) {
    try {
      if (this.isTokenExpired()) await this.requestToken();
      if (!this.accessToken) return null;
      const res = await fetch(`${SP_BASE}/albums/${id}?market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok) return null;
      const data = await res.json();
      if (!data.tracks.items.length) return null;
      const t = data.tracks.items;
      let next = data.tracks.next;
      while (typeof next === "string") {
        try {
          const res2 = await fetch(next, {
            headers: {
              "User-Agent": UA,
              Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
              "Content-Type": "application/json"
            }
          });
          if (!res2.ok) break;
          const nextPage = await res2.json();
          t.push(...nextPage.items);
          next = nextPage.next;
          if (!next) break;
        } catch {
          break;
        }
      }
      const tracks = t.map((m) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: data.images?.[0]?.url || null
      }));
      if (!tracks.length) return null;
      return {
        name: data.name,
        author: data.artists.map((m) => m.name).join(", "),
        thumbnail: data.images?.[0]?.url || null,
        id: data.id,
        url: data.external_urls.spotify || `https://open.spotify.com/album/${id}`,
        tracks
      };
    } catch {
      return null;
    }
  }
};
__name(_SpotifyAPI, "SpotifyAPI");
var SpotifyAPI = _SpotifyAPI;

// src/extractors/AppleMusicExtractor.ts
var _AppleMusicExtractor = class _AppleMusicExtractor extends BaseExtractor5 {
  constructor() {
    super(...arguments);
    __publicField(this, "_stream");
  }
  async activate() {
    this.protocols = ["amsearch", "applemusic"];
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._stream = (q, t) => {
        return fn(this, q, t);
      };
    }
  }
  async deactivate() {
    this.protocols = [];
  }
  async validate(query, type) {
    return [
      QueryType5.APPLE_MUSIC_ALBUM,
      QueryType5.APPLE_MUSIC_PLAYLIST,
      QueryType5.APPLE_MUSIC_SONG,
      QueryType5.APPLE_MUSIC_SEARCH,
      QueryType5.AUTO,
      QueryType5.AUTO_SEARCH
    ].some((t) => t === type);
  }
  async getRelatedTracks(track, history) {
    if (track.queryType === QueryType5.APPLE_MUSIC_SONG) {
      const data = await this.handle(track.author || track.title, {
        type: QueryType5.APPLE_MUSIC_SEARCH,
        requestedBy: track.requestedBy
      });
      const unique = data.tracks.filter(
        (t) => !history.tracks.some((h) => h.url === t.url)
      );
      return unique.length > 0 ? this.createResponse(null, unique) : this.createResponse();
    }
    return this.createResponse();
  }
  async handle(query, context) {
    if (context.protocol === "amsearch")
      context.type = QueryType5.APPLE_MUSIC_SEARCH;
    switch (context.type) {
      case QueryType5.AUTO:
      case QueryType5.AUTO_SEARCH:
      case QueryType5.APPLE_MUSIC_SEARCH: {
        const data = await AppleMusic.search(query);
        if (!data || !data.length) return this.createResponse();
        const tracks = data.map(
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (m) => {
            const track = new Track5(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? Util5.buildTimeCode(Util5.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: /* @__PURE__ */ __name(async () => {
                return {
                  source: m,
                  bridge: null
                };
              }, "requestMetadata")
            });
            track.extractor = this;
            return track;
          }
        );
        return this.createResponse(null, tracks);
      }
      case QueryType5.APPLE_MUSIC_ALBUM: {
        const info = await AppleMusic.getAlbumInfo(query);
        if (!info) return this.createResponse();
        const playlist = new Playlist2(this.context.player, {
          author: {
            name: info.artist.name,
            url: ""
          },
          description: info.title,
          id: info.id,
          source: "apple_music",
          thumbnail: info.thumbnail,
          title: info.title,
          tracks: [],
          type: "album",
          url: info.url,
          rawPlaylist: info
        });
        playlist.tracks = info.tracks.map(
          (m) => {
            const track = new Track5(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? Util5.buildTimeCode(Util5.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: info,
                bridge: null
              },
              requestMetadata: /* @__PURE__ */ __name(async () => {
                return {
                  source: info,
                  bridge: null
                };
              }, "requestMetadata")
            });
            track.playlist = playlist;
            track.extractor = this;
            return track;
          }
        );
        return { playlist, tracks: playlist.tracks };
      }
      case QueryType5.APPLE_MUSIC_PLAYLIST: {
        const info = await AppleMusic.getPlaylistInfo(query);
        if (!info) return this.createResponse();
        const playlist = new Playlist2(this.context.player, {
          author: {
            name: info.artist.name,
            url: ""
          },
          description: info.title,
          id: info.id,
          source: "apple_music",
          thumbnail: info.thumbnail,
          title: info.title,
          tracks: [],
          type: "playlist",
          url: info.url,
          rawPlaylist: info
        });
        playlist.tracks = info.tracks.map(
          (m) => {
            const track = new Track5(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? Util5.buildTimeCode(Util5.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: /* @__PURE__ */ __name(async () => {
                return {
                  source: m,
                  bridge: null
                };
              }, "requestMetadata")
            });
            track.playlist = playlist;
            track.extractor = this;
            return track;
          }
        );
        return { playlist, tracks: playlist.tracks };
      }
      case QueryType5.APPLE_MUSIC_SONG: {
        const info = await AppleMusic.getSongInfo(query);
        if (!info) return this.createResponse();
        const track = new Track5(this.context.player, {
          author: info.artist.name,
          description: info.title,
          duration: typeof info.duration === "number" ? Util5.buildTimeCode(Util5.parseMS(info.duration)) : info.duration,
          thumbnail: info.thumbnail,
          title: info.title,
          url: info.url,
          views: 0,
          source: "apple_music",
          requestedBy: context.requestedBy,
          queryType: context.type,
          metadata: {
            source: info,
            bridge: null
          },
          requestMetadata: /* @__PURE__ */ __name(async () => {
            return {
              source: info,
              bridge: null
            };
          }, "requestMetadata")
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return { playlist: null, tracks: [] };
    }
  }
  async stream(info) {
    if (this._stream) {
      const stream = await this._stream(info.url, info);
      if (typeof stream === "string") return stream;
      return stream;
    }
    const result = await this.context.requestBridge(info, this);
    if (!result?.result) throw new Error("Could not bridge this track");
    return result.result;
  }
};
__name(_AppleMusicExtractor, "AppleMusicExtractor");
__publicField(_AppleMusicExtractor, "identifier", "com.discord-player.applemusicextractor");
var AppleMusicExtractor = _AppleMusicExtractor;

// src/extractors/SpotifyExtractor.ts
import {
  BaseExtractor as BaseExtractor6,
  Playlist as Playlist3,
  QueryType as QueryType6,
  Track as Track6,
  Util as Util6
} from "discord-player";
import spotify from "spotify-url-info";
var re = /^(?:https:\/\/open\.spotify\.com\/(intl-([a-z]|[A-Z]){0,3}\/)?(?:user\/[A-Za-z0-9]+\/)?|spotify:)(album|playlist|track)(?:[/:])([A-Za-z0-9]+).*$/;
var _SpotifyExtractor = class _SpotifyExtractor extends BaseExtractor6 {
  constructor() {
    super(...arguments);
    __publicField(this, "_stream");
    __publicField(this, "_lib");
    __publicField(this, "_credentials", {
      clientId: this.options.clientId || process.env.DP_SPOTIFY_CLIENT_ID || null,
      clientSecret: this.options.clientSecret || process.env.DP_SPOTIFY_CLIENT_SECRET || null
    });
    __publicField(this, "internal", new SpotifyAPI(this._credentials));
  }
  async activate() {
    this.protocols = ["spsearch", "spotify"];
    this._lib = spotify(fetch);
    if (this.internal.isTokenExpired()) await this.internal.requestToken();
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._stream = (q) => {
        return fn(this, q);
      };
    }
  }
  async deactivate() {
    this._stream = void 0;
    this._lib = void 0;
    this.protocols = [];
  }
  async validate(query, type) {
    return [
      QueryType6.SPOTIFY_ALBUM,
      QueryType6.SPOTIFY_PLAYLIST,
      QueryType6.SPOTIFY_SONG,
      QueryType6.SPOTIFY_SEARCH,
      QueryType6.AUTO,
      QueryType6.AUTO_SEARCH
    ].some((t) => t === type);
  }
  async getRelatedTracks(track) {
    return await this.handle(track.author || track.title, {
      type: QueryType6.SPOTIFY_SEARCH,
      requestedBy: track.requestedBy
    });
  }
  async handle(query, context) {
    if (context.protocol === "spsearch")
      context.type = QueryType6.SPOTIFY_SEARCH;
    switch (context.type) {
      case QueryType6.AUTO:
      case QueryType6.AUTO_SEARCH:
      case QueryType6.SPOTIFY_SEARCH: {
        const data = await this.internal.search(query);
        if (!data) return this.createResponse();
        return this.createResponse(
          null,
          data.map((spotifyData) => {
            const track = new Track6(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util6.buildTimeCode(
                Util6.parseMS(spotifyData.duration ?? 0)
              ),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: QueryType6.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: /* @__PURE__ */ __name(async () => {
                return {
                  source: spotifyData,
                  bridge: null
                };
              }, "requestMetadata")
            });
            track.extractor = this;
            return track;
          })
        );
      }
      case QueryType6.SPOTIFY_SONG: {
        const spotifyData = await this._lib.getData(query, context.requestOptions).catch(Util6.noop);
        if (!spotifyData) return { playlist: null, tracks: [] };
        const spotifyTrack = new Track6(this.context.player, {
          title: spotifyData.title,
          description: `${spotifyData.name} by ${spotifyData.artists.map((m) => m.name).join(", ")}`,
          author: spotifyData.artists[0]?.name ?? "Unknown Artist",
          url: spotifyData.id ? `https://open.spotify.com/track/${spotifyData.id}` : query,
          thumbnail: spotifyData.coverArt?.sources?.[0]?.url || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
          duration: Util6.buildTimeCode(
            Util6.parseMS(spotifyData.duration ?? spotifyData.maxDuration ?? 0)
          ),
          views: 0,
          requestedBy: context.requestedBy,
          source: "spotify",
          queryType: context.type,
          metadata: {
            source: spotifyData,
            bridge: null
          },
          requestMetadata: /* @__PURE__ */ __name(async () => {
            return {
              source: spotifyData,
              bridge: null
            };
          }, "requestMetadata")
        });
        spotifyTrack.extractor = this;
        return { playlist: null, tracks: [spotifyTrack] };
      }
      case QueryType6.SPOTIFY_PLAYLIST: {
        try {
          const { queryType, id } = this.parse(query);
          if (queryType !== "playlist") throw "err";
          const spotifyPlaylist = await this.internal.getPlaylist(id);
          if (!spotifyPlaylist) throw "err";
          const playlist = new Playlist3(this.context.player, {
            title: spotifyPlaylist.name,
            description: spotifyPlaylist.name ?? "",
            thumbnail: spotifyPlaylist.thumbnail ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: "playlist",
            source: "spotify",
            author: {
              name: spotifyPlaylist.author ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyPlaylist.id,
            url: spotifyPlaylist.url || query,
            rawPlaylist: spotifyPlaylist
          });
          playlist.tracks = spotifyPlaylist.tracks.map((spotifyData) => {
            const data = new Track6(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util6.buildTimeCode(
                Util6.parseMS(spotifyData.duration ?? 0)
              ),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: QueryType6.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: /* @__PURE__ */ __name(async () => {
                return {
                  source: spotifyData,
                  bridge: null
                };
              }, "requestMetadata")
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        } catch {
          const spotifyPlaylist = await this._lib.getData(query, context.requestOptions).catch(Util6.noop);
          if (!spotifyPlaylist) return { playlist: null, tracks: [] };
          const playlist = new Playlist3(this.context.player, {
            title: spotifyPlaylist.name ?? spotifyPlaylist.title,
            description: spotifyPlaylist.title ?? "",
            thumbnail: spotifyPlaylist.coverArt?.sources?.[0]?.url ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: spotifyPlaylist.type,
            source: "spotify",
            author: {
              name: spotifyPlaylist.subtitle ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyPlaylist.id,
            url: spotifyPlaylist.id ? `https://open.spotify.com/playlist/${spotifyPlaylist.id}` : query,
            rawPlaylist: spotifyPlaylist
          });
          playlist.tracks = spotifyPlaylist.trackList.map((m) => {
            const data = new Track6(this.context.player, {
              title: m.title ?? "",
              description: m.title ?? "",
              author: m.subtitle ?? "Unknown Artist",
              url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,
              thumbnail: "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util6.buildTimeCode(Util6.parseMS(m.duration)),
              views: 0,
              requestedBy: context.requestedBy,
              playlist,
              source: "spotify",
              queryType: "spotifySong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: /* @__PURE__ */ __name(async () => {
                return {
                  source: m,
                  bridge: null
                };
              }, "requestMetadata")
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        }
      }
      case QueryType6.SPOTIFY_ALBUM: {
        try {
          const { queryType, id } = this.parse(query);
          if (queryType !== "album") throw "err";
          const spotifyAlbum = await this.internal.getAlbum(id);
          if (!spotifyAlbum) throw "err";
          const playlist = new Playlist3(this.context.player, {
            title: spotifyAlbum.name,
            description: spotifyAlbum.name ?? "",
            thumbnail: spotifyAlbum.thumbnail ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: "album",
            source: "spotify",
            author: {
              name: spotifyAlbum.author ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyAlbum.id,
            url: spotifyAlbum.url || query,
            rawPlaylist: spotifyAlbum
          });
          playlist.tracks = spotifyAlbum.tracks.map((spotifyData) => {
            const data = new Track6(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util6.buildTimeCode(
                Util6.parseMS(spotifyData.duration ?? 0)
              ),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: QueryType6.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: /* @__PURE__ */ __name(async () => {
                return {
                  source: spotifyData,
                  bridge: null
                };
              }, "requestMetadata")
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        } catch {
          const album = await this._lib.getData(query, context.requestOptions).catch(Util6.noop);
          if (!album) return { playlist: null, tracks: [] };
          const playlist = new Playlist3(this.context.player, {
            title: album.name ?? album.title,
            description: album.title ?? "",
            thumbnail: album.coverArt?.sources?.[0]?.url ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: album.type,
            source: "spotify",
            author: {
              name: album.subtitle ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: album.id,
            url: album.id ? `https://open.spotify.com/playlist/${album.id}` : query,
            rawPlaylist: album
          });
          playlist.tracks = album.trackList.map((m) => {
            const data = new Track6(this.context.player, {
              title: m.title ?? "",
              description: m.title ?? "",
              author: m.subtitle ?? "Unknown Artist",
              url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,
              thumbnail: "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util6.buildTimeCode(Util6.parseMS(m.duration)),
              views: 0,
              requestedBy: context.requestedBy,
              playlist,
              source: "spotify",
              queryType: "spotifySong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: /* @__PURE__ */ __name(async () => {
                return {
                  source: m,
                  bridge: null
                };
              }, "requestMetadata")
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        }
      }
      default:
        return { playlist: null, tracks: [] };
    }
  }
  async stream(info) {
    if (this._stream) {
      const stream = await this._stream(info.url, info);
      if (typeof stream === "string") return stream;
      return stream;
    }
    const result = await this.context.requestBridge(info, this);
    if (!result?.result) throw new Error("Could not bridge this track");
    return result.result;
  }
  parse(q) {
    const [, , , queryType, id] = re.exec(q) || [];
    return { queryType, id };
  }
};
__name(_SpotifyExtractor, "SpotifyExtractor");
__publicField(_SpotifyExtractor, "identifier", "com.discord-player.spotifyextractor");
var SpotifyExtractor = _SpotifyExtractor;

// src/version.ts
var version = (
  /* @__MACRO__ getVersion */
  "7.1.0"
);

// src/index.ts
var DefaultExtractors = [
  SoundCloudExtractor,
  AttachmentExtractor,
  VimeoExtractor,
  ReverbnationExtractor,
  AppleMusicExtractor,
  SpotifyExtractor
];
export {
  AppleMusicExtractor,
  AttachmentExtractor,
  DefaultExtractors,
  internal_exports as Internal,
  ReverbnationExtractor,
  SoundCloudExtractor,
  SpotifyExtractor,
  VimeoExtractor,
  lyricsExtractor,
  version
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2V4dHJhY3RvcnMvU291bmRDbG91ZEV4dHJhY3Rvci50cyIsICIuLi9zcmMvaW50ZXJuYWwvaGVscGVyLnRzIiwgIi4uL3NyYy9leHRyYWN0b3JzL0x5cmljc0V4dHJhY3Rvci50cyIsICIuLi9zcmMvZXh0cmFjdG9ycy9WaW1lb0V4dHJhY3Rvci50cyIsICIuLi9zcmMvaW50ZXJuYWwvVmltZW8udHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvUmV2ZXJibmF0aW9uRXh0cmFjdG9yLnRzIiwgIi4uL3NyYy9leHRyYWN0b3JzL0F0dGFjaG1lbnRFeHRyYWN0b3IudHMiLCAiLi4vc3JjL2ludGVybmFsL2Rvd25sb2FkZXIudHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvQXBwbGVNdXNpY0V4dHJhY3Rvci50cyIsICIuLi9zcmMvaW50ZXJuYWwvaW5kZXgudHMiLCAiLi4vc3JjL2ludGVybmFsL0FwcGxlTXVzaWMudHMiLCAiLi4vc3JjL2ludGVybmFsL1Nwb3RpZnkudHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvU3BvdGlmeUV4dHJhY3Rvci50cyIsICIuLi9zcmMvdmVyc2lvbi50cyIsICIuLi9zcmMvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIHByZXR0aWVyLWlnbm9yZVxuaW1wb3J0IHtcbiAgQmFzZUV4dHJhY3RvcixcbiAgRXh0cmFjdG9ySW5mbyxcbiAgRXh0cmFjdG9yU2VhcmNoQ29udGV4dCxcbiAgRXh0cmFjdG9yU3RyZWFtYWJsZSxcbiAgdHlwZSBHdWlsZFF1ZXVlSGlzdG9yeSxcbiAgUGxheWxpc3QsXG4gIFF1ZXJ5VHlwZSxcbiAgU2VhcmNoUXVlcnlUeXBlLFxuICBUcmFjayxcbiAgVXRpbCB9IGZyb21cbidkaXNjb3JkLXBsYXllcic7XG5pbXBvcnQgKiBhcyBTb3VuZENsb3VkIGZyb20gJ3NvdW5kY2xvdWQudHMnO1xuaW1wb3J0IHsgZmlsdGVyU291bmRDbG91ZFByZXZpZXdzIH0gZnJvbSAnLi4vaW50ZXJuYWwvaGVscGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBTb3VuZENsb3VkRXh0cmFjdG9ySW5pdCB7XG4gIGNsaWVudElkPzogc3RyaW5nO1xuICBvYXV0aFRva2VuPzogc3RyaW5nO1xuICBwcm94eT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFNvdW5kQ2xvdWRFeHRyYWN0b3IgZXh0ZW5kcyBCYXNlRXh0cmFjdG9yPFNvdW5kQ2xvdWRFeHRyYWN0b3JJbml0PiB7XG4gIHB1YmxpYyBzdGF0aWMgaWRlbnRpZmllciA9ICdjb20uZGlzY29yZC1wbGF5ZXIuc291bmRjbG91ZGV4dHJhY3RvcicgYXMgY29uc3Q7XG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U6IFNvdW5kQ2xvdWRFeHRyYWN0b3IgfCBudWxsID0gbnVsbDtcblxuICBwdWJsaWMgaW50ZXJuYWwgPSBuZXcgU291bmRDbG91ZC5kZWZhdWx0KHtcbiAgICBjbGllbnRJZDogdGhpcy5vcHRpb25zLmNsaWVudElkLFxuICAgIG9hdXRoVG9rZW46IHRoaXMub3B0aW9ucy5vYXV0aFRva2VuLFxuICAgIHByb3h5OiB0aGlzLm9wdGlvbnMucHJveHlcbiAgfSk7XG5cbiAgcHVibGljIGFzeW5jIGFjdGl2YXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMucHJvdG9jb2xzID0gWydzY3NlYXJjaCcsICdzb3VuZGNsb3VkJ107XG4gICAgU291bmRDbG91ZEV4dHJhY3Rvci5pbnN0YW5jZSA9IHRoaXM7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVhY3RpdmF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLnByb3RvY29scyA9IFtdO1xuICAgIFNvdW5kQ2xvdWRFeHRyYWN0b3IuaW5zdGFuY2UgPSBudWxsO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHZhbGlkYXRlKFxuICBxdWVyeTogc3RyaW5nLFxuICB0eXBlPzogU2VhcmNoUXVlcnlUeXBlIHwgbnVsbCB8IHVuZGVmaW5lZClcbiAgOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHJldHVybiAoW1xuICAgIFF1ZXJ5VHlwZS5TT1VORENMT1VELFxuICAgIFF1ZXJ5VHlwZS5TT1VORENMT1VEX1BMQVlMSVNULFxuICAgIFF1ZXJ5VHlwZS5TT1VORENMT1VEX1NFQVJDSCxcbiAgICBRdWVyeVR5cGUuU09VTkRDTE9VRF9UUkFDSyxcbiAgICBRdWVyeVR5cGUuQVVUTyxcbiAgICBRdWVyeVR5cGUuQVVUT19TRUFSQ0hdIGFzXG4gICAgU2VhcmNoUXVlcnlUeXBlW10pLnNvbWUoKHIpID0+IHIgPT09IHR5cGUpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFJlbGF0ZWRUcmFja3ModHJhY2s6IFRyYWNrLCBoaXN0b3J5OiBHdWlsZFF1ZXVlSGlzdG9yeSkge1xuICAgIGlmICh0cmFjay5xdWVyeVR5cGUgPT09IFF1ZXJ5VHlwZS5TT1VORENMT1VEX1RSQUNLKSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5pbnRlcm5hbC50cmFja3MucmVsYXRlZFYyKHRyYWNrLnVybCwgNSk7XG5cbiAgICAgIGNvbnN0IHVuaXF1ZSA9IGZpbHRlclNvdW5kQ2xvdWRQcmV2aWV3cyhkYXRhKS5maWx0ZXIoXG4gICAgICAgICh0KSA9PiAhaGlzdG9yeS50cmFja3Muc29tZSgoaCkgPT4gaC51cmwgPT09IHQucGVybWFsaW5rX3VybClcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKFxuICAgICAgICBudWxsLFxuICAgICAgICAodW5pcXVlLmxlbmd0aCA+IDAgPyB1bmlxdWUgOiBkYXRhKS5tYXAoKHRyYWNrSW5mbykgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1RyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgIHRpdGxlOiB0cmFja0luZm8udGl0bGUsXG4gICAgICAgICAgICB1cmw6IHRyYWNrSW5mby5wZXJtYWxpbmtfdXJsLFxuICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVModHJhY2tJbmZvLmR1cmF0aW9uKSksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdHJhY2tJbmZvLmRlc2NyaXB0aW9uID8/ICcnLFxuICAgICAgICAgICAgdGh1bWJuYWlsOiB0cmFja0luZm8uYXJ0d29ya191cmwsXG4gICAgICAgICAgICB2aWV3czogdHJhY2tJbmZvLnBsYXliYWNrX2NvdW50LFxuICAgICAgICAgICAgYXV0aG9yOiB0cmFja0luZm8udXNlci51c2VybmFtZSxcbiAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiB0cmFjay5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgIHNvdXJjZTogJ3NvdW5kY2xvdWQnLFxuICAgICAgICAgICAgZW5naW5lOiB0cmFja0luZm8sXG4gICAgICAgICAgICBxdWVyeVR5cGU6IFF1ZXJ5VHlwZS5TT1VORENMT1VEX1RSQUNLLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gdHJhY2tJbmZvO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsZWFuVGl0bGU6IHRyYWNrSW5mby50aXRsZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbmV3VHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgIHJldHVybiBuZXdUcmFjaztcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBoYW5kbGUoXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpXG4gIDogUHJvbWlzZTxFeHRyYWN0b3JJbmZvPiB7XG4gICAgaWYgKGNvbnRleHQucHJvdG9jb2wgPT09ICdzY3NlYXJjaCcpXG4gICAgY29udGV4dC50eXBlID0gUXVlcnlUeXBlLlNPVU5EQ0xPVURfU0VBUkNIO1xuICAgIHN3aXRjaCAoY29udGV4dC50eXBlKSB7XG4gICAgICBjYXNlIFF1ZXJ5VHlwZS5TT1VORENMT1VEX1RSQUNLOntcbiAgICAgICAgICBjb25zdCB0cmFja0luZm8gPSBhd2FpdCB0aGlzLmludGVybmFsLnRyYWNrcy5cbiAgICAgICAgICBnZXRWMihxdWVyeSkuXG4gICAgICAgICAgY2F0Y2goVXRpbC5ub29wKTtcblxuICAgICAgICAgIGlmICghdHJhY2tJbmZvKSByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG5cbiAgICAgICAgICBjb25zdCB0cmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICB0aXRsZTogdHJhY2tJbmZvLnRpdGxlLFxuICAgICAgICAgICAgdXJsOiB0cmFja0luZm8ucGVybWFsaW5rX3VybCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKHRyYWNrSW5mby5kdXJhdGlvbikpLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHRyYWNrSW5mby5kZXNjcmlwdGlvbiA/PyAnJyxcbiAgICAgICAgICAgIHRodW1ibmFpbDogdHJhY2tJbmZvLmFydHdvcmtfdXJsLFxuICAgICAgICAgICAgdmlld3M6IHRyYWNrSW5mby5wbGF5YmFja19jb3VudCxcbiAgICAgICAgICAgIGF1dGhvcjogdHJhY2tJbmZvLnVzZXIudXNlcm5hbWUsXG4gICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgIHNvdXJjZTogJ3NvdW5kY2xvdWQnLFxuICAgICAgICAgICAgZW5naW5lOiB0cmFja0luZm8sXG4gICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQudHlwZSxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB0cmFja0luZm8sXG4gICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrSW5mbztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhblRpdGxlOiB0cmFja0luZm8udGl0bGVcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbdHJhY2tdIH07XG4gICAgICAgIH1cbiAgICAgIGNhc2UgUXVlcnlUeXBlLlNPVU5EQ0xPVURfUExBWUxJU1Q6e1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmludGVybmFsLnBsYXlsaXN0cy5cbiAgICAgICAgICBnZXRWMihxdWVyeSkuXG4gICAgICAgICAgY2F0Y2goVXRpbC5ub29wKTtcbiAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG5cbiAgICAgICAgICBjb25zdCByZXMgPSBuZXcgUGxheWxpc3QodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvbiA/PyAnJyxcbiAgICAgICAgICAgIHRodW1ibmFpbDogZGF0YS5hcnR3b3JrX3VybCA/PyBkYXRhLnRyYWNrc1swXS5hcnR3b3JrX3VybCxcbiAgICAgICAgICAgIHR5cGU6ICdwbGF5bGlzdCcsXG4gICAgICAgICAgICBzb3VyY2U6ICdzb3VuZGNsb3VkJyxcbiAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICBuYW1lOiBkYXRhLnVzZXIudXNlcm5hbWUsXG4gICAgICAgICAgICAgIHVybDogZGF0YS51c2VyLnBlcm1hbGlua191cmxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICAgICAgaWQ6IGAke2RhdGEuaWR9YCxcbiAgICAgICAgICAgIHVybDogZGF0YS5wZXJtYWxpbmtfdXJsLFxuICAgICAgICAgICAgcmF3UGxheWxpc3Q6IGRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZvciAoY29uc3Qgc29uZyBvZiBkYXRhLnRyYWNrcykge1xuICAgICAgICAgICAgY29uc3QgdHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICB0aXRsZTogc29uZy50aXRsZSxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHNvbmcuZGVzY3JpcHRpb24gPz8gJycsXG4gICAgICAgICAgICAgIGF1dGhvcjogc29uZy51c2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgICB1cmw6IHNvbmcucGVybWFsaW5rX3VybCxcbiAgICAgICAgICAgICAgdGh1bWJuYWlsOiBzb25nLmFydHdvcmtfdXJsLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhzb25nLmR1cmF0aW9uKSksXG4gICAgICAgICAgICAgIHZpZXdzOiBzb25nLnBsYXliYWNrX2NvdW50LFxuICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgcGxheWxpc3Q6IHJlcyxcbiAgICAgICAgICAgICAgc291cmNlOiAnc291bmRjbG91ZCcsXG4gICAgICAgICAgICAgIGVuZ2luZTogc29uZyxcbiAgICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICAgIG1ldGFkYXRhOiBzb25nLFxuICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc29uZztcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2xlYW5UaXRsZTogc29uZy50aXRsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuICAgICAgICAgICAgdHJhY2sucGxheWxpc3QgPSByZXM7XG4gICAgICAgICAgICByZXMudHJhY2tzLnB1c2godHJhY2spO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiByZXMsIHRyYWNrczogcmVzLnRyYWNrcyB9O1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OntcbiAgICAgICAgICBsZXQgdHJhY2tzID0gYXdhaXQgdGhpcy5pbnRlcm5hbC50cmFja3MuXG4gICAgICAgICAgc2VhcmNoVjIoeyBxOiBxdWVyeSB9KS5cbiAgICAgICAgICB0aGVuKCh0KSA9PiB0LmNvbGxlY3Rpb24pLlxuICAgICAgICAgIGNhdGNoKFV0aWwubm9vcCk7XG5cbiAgICAgICAgICBpZiAoIXRyYWNrcylcbiAgICAgICAgICB0cmFja3MgPSBhd2FpdCB0aGlzLmludGVybmFsLnRyYWNrcy5zZWFyY2hBbHQocXVlcnkpLmNhdGNoKFV0aWwubm9vcCk7XG5cbiAgICAgICAgICBpZiAoIXRyYWNrcyB8fCAhdHJhY2tzLmxlbmd0aCkgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuXG4gICAgICAgICAgdHJhY2tzID0gZmlsdGVyU291bmRDbG91ZFByZXZpZXdzKHRyYWNrcyk7XG5cbiAgICAgICAgICBjb25zdCByZXNvbHZlZFRyYWNrczogVHJhY2tbXSA9IFtdO1xuXG4gICAgICAgICAgZm9yIChjb25zdCB0cmFja0luZm8gb2YgdHJhY2tzKSB7XG4gICAgICAgICAgICBpZiAoIXRyYWNrSW5mby5zdHJlYW1hYmxlKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgdGl0bGU6IHRyYWNrSW5mby50aXRsZSxcbiAgICAgICAgICAgICAgdXJsOiB0cmFja0luZm8ucGVybWFsaW5rX3VybCxcbiAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVModHJhY2tJbmZvLmR1cmF0aW9uKSksXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0cmFja0luZm8uZGVzY3JpcHRpb24gPz8gJycsXG4gICAgICAgICAgICAgIHRodW1ibmFpbDogdHJhY2tJbmZvLmFydHdvcmtfdXJsLFxuICAgICAgICAgICAgICB2aWV3czogdHJhY2tJbmZvLnBsYXliYWNrX2NvdW50LFxuICAgICAgICAgICAgICBhdXRob3I6IHRyYWNrSW5mby51c2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgc291cmNlOiAnc291bmRjbG91ZCcsXG4gICAgICAgICAgICAgIGVuZ2luZTogdHJhY2tJbmZvLFxuICAgICAgICAgICAgICBxdWVyeVR5cGU6ICdzb3VuZGNsb3VkVHJhY2snLFxuICAgICAgICAgICAgICBtZXRhZGF0YTogdHJhY2tJbmZvLFxuICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2tJbmZvO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgcmVzb2x2ZWRUcmFja3MucHVzaCh0cmFjayk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogcmVzb2x2ZWRUcmFja3MgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBlbXB0eVJlc3BvbnNlKCk6IEV4dHJhY3RvckluZm8ge1xuICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RyZWFtKGluZm86IFRyYWNrKSB7XG4gICAgY29uc3QgdXJsID0gYXdhaXQgdGhpcy5pbnRlcm5hbC51dGlsLnN0cmVhbUxpbmsoaW5mby51cmwpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgaWYgKCF1cmwpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZXh0cmFjdCBzdHJlYW0gZnJvbSB0aGlzIHRyYWNrIHNvdXJjZScpO1xuXG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBicmlkZ2UoXG4gIHRyYWNrOiBUcmFjayxcbiAgc291cmNlRXh0cmFjdG9yOiBCYXNlRXh0cmFjdG9yIHwgbnVsbClcbiAgOiBQcm9taXNlPEV4dHJhY3RvclN0cmVhbWFibGUgfCBudWxsPiB7XG4gICAgaWYgKHNvdXJjZUV4dHJhY3Rvcj8uaWRlbnRpZmllciA9PT0gdGhpcy5pZGVudGlmaWVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0odHJhY2spO1xuICAgIH1cblxuICAgIGNvbnN0IHF1ZXJ5ID1cbiAgICBzb3VyY2VFeHRyYWN0b3I/LmNyZWF0ZUJyaWRnZVF1ZXJ5KHRyYWNrKSA/P1xuICAgIGAke3RyYWNrLmF1dGhvcn0gLSAke3RyYWNrLnRpdGxlfWA7XG5cbiAgICBjb25zdCBpbmZvID0gYXdhaXQgdGhpcy5oYW5kbGUocXVlcnksIHtcbiAgICAgIHJlcXVlc3RlZEJ5OiB0cmFjay5yZXF1ZXN0ZWRCeSxcbiAgICAgIHR5cGU6IFF1ZXJ5VHlwZS5TT1VORENMT1VEX1NFQVJDSFxuICAgIH0pO1xuXG4gICAgaWYgKCFpbmZvLnRyYWNrcy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zdHJlYW0oaW5mby50cmFja3NbMF0pO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgdHJhY2suYnJpZGdlZFRyYWNrID0gaW5mby50cmFja3NbMF07XG4gICAgICB0cmFjay5icmlkZ2VkRXh0cmFjdG9yID0gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59IiwgImltcG9ydCB7IEJhc2VFeHRyYWN0b3IsIFRyYWNrIH0gZnJvbSAnZGlzY29yZC1wbGF5ZXInO1xuaW1wb3J0IHsgU291bmRDbG91ZEV4dHJhY3RvciB9IGZyb20gJy4uL2V4dHJhY3RvcnMvU291bmRDbG91ZEV4dHJhY3Rvcic7XG5pbXBvcnQgdW5mZXRjaCBmcm9tICdpc29tb3JwaGljLXVuZmV0Y2gnO1xuaW1wb3J0IHR5cGUgKiBhcyBTb3VuZENsb3VkIGZyb20gJ3NvdW5kY2xvdWQudHMnO1xuXG5leHBvcnQgY29uc3QgVUEgPVxuJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDkuMC4wLjAgU2FmYXJpLzUzNy4zNiBFZGcvMTA5LjAuMTUxOC40OSc7XG5leHBvcnQgY29uc3QgZmV0Y2ggPSB1bmZldGNoO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFrZVNDU2VhcmNoKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgY29uc3QgeyBpbnN0YW5jZSB9ID0gU291bmRDbG91ZEV4dHJhY3RvcjtcbiAgaWYgKCFpbnN0YW5jZT8uaW50ZXJuYWwpIHJldHVybiBbXTtcblxuICBsZXQgZGF0YTogU291bmRDbG91ZC5Tb3VuZGNsb3VkVHJhY2tWMltdO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgaW5mbyA9IGF3YWl0IGluc3RhbmNlLmludGVybmFsLnRyYWNrcy5zZWFyY2hWMih7XG4gICAgICBxOiBxdWVyeSxcbiAgICAgIGxpbWl0OiA1XG4gICAgfSk7XG5cbiAgICBkYXRhID0gaW5mby5jb2xsZWN0aW9uO1xuICB9IGNhdGNoIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGNvbnN0IGluZm8gPSBhd2FpdCBpbnN0YW5jZS5pbnRlcm5hbC50cmFja3Muc2VhcmNoQWx0KHF1ZXJ5KTtcblxuICAgIGRhdGEgPSBpbmZvO1xuICB9XG5cbiAgcmV0dXJuIGZpbHRlclNvdW5kQ2xvdWRQcmV2aWV3cyhkYXRhKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHB1bGxTQ01ldGFkYXRhKGV4dDogQmFzZUV4dHJhY3RvciwgaW5mbzogVHJhY2spIHtcbiAgY29uc3QgbWV0YSA9IGF3YWl0IG1ha2VTQ1NlYXJjaChleHQuY3JlYXRlQnJpZGdlUXVlcnkoaW5mbykpLlxuICB0aGVuKChyKSA9PiByWzBdKS5cbiAgY2F0Y2goKCkgPT4gbnVsbCk7XG5cbiAgcmV0dXJuIG1ldGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJTb3VuZENsb3VkUHJldmlld3MoXG50cmFja3M6IFNvdW5kQ2xvdWQuU291bmRjbG91ZFRyYWNrVjJbXSlcbjogU291bmRDbG91ZC5Tb3VuZGNsb3VkVHJhY2tWMltdIHtcbiAgY29uc3QgZmlsdGVyZWQgPSB0cmFja3MuZmlsdGVyKCh0KSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0LnBvbGljeSA9PT0gJ3N0cmluZycpIHJldHVybiB0LnBvbGljeS50b1VwcGVyQ2FzZSgpID09PSAnQUxMT1cnO1xuICAgIHJldHVybiAhKHQuZHVyYXRpb24gPT09IDMwXzAwMCAmJiB0LmZ1bGxfZHVyYXRpb24gPiAzMF8wMDApO1xuICB9KTtcblxuICBjb25zdCByZXN1bHQgPSBmaWx0ZXJlZC5sZW5ndGggPiAwID8gZmlsdGVyZWQgOiB0cmFja3M7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCAiZXhwb3J0IGZ1bmN0aW9uIGx5cmljc0V4dHJhY3RvcigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICdMZWdhY3kgbHlyaWNzIGV4dHJhY3RvciBoYXMgYmVlbiByZW1vdmVkLiBQbGVhc2UgdXNlIHRoZSBuZXcgbHlyaWNzIGFwaSBmcm9tIGBwbGF5ZXIubHlyaWNzYCBpbnN0ZWFkLiBJdCBvZmZlcnMgbW9yZSBhY2N1cmF0ZSByZXN1bHQgYW5kIGZlYXR1cmVzIGxpa2UgcGxhaW4gbHlyaWNzIGFuZCBzeW5jZWQgbHlyaWNzLidcbiAgKTtcbn0iLCAiLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge1xuICBCYXNlRXh0cmFjdG9yLFxuICBFeHRyYWN0b3JJbmZvLFxuICBFeHRyYWN0b3JTZWFyY2hDb250ZXh0LFxuICBRdWVyeVR5cGUsXG4gIFNlYXJjaFF1ZXJ5VHlwZSxcbiAgVHJhY2ssXG4gIFV0aWwgfSBmcm9tXG4nZGlzY29yZC1wbGF5ZXInO1xuaW1wb3J0IHsgVmltZW8gfSBmcm9tICcuLi9pbnRlcm5hbC9WaW1lbyc7XG5cbmV4cG9ydCBjbGFzcyBWaW1lb0V4dHJhY3RvciBleHRlbmRzIEJhc2VFeHRyYWN0b3Ige1xuICBwdWJsaWMgc3RhdGljIGlkZW50aWZpZXIgPSAnY29tLmRpc2NvcmQtcGxheWVyLnZpbWVvZXh0cmFjdG9yJyBhcyBjb25zdDtcblxuICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUoXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIHR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBudWxsIHwgdW5kZWZpbmVkKVxuICA6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmICh0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIChbUXVlcnlUeXBlLlZJTUVPXSBhcyBTZWFyY2hRdWVyeVR5cGVbXSkuc29tZSgocikgPT4gciA9PT0gdHlwZSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0UmVsYXRlZFRyYWNrcyh0cmFjazogVHJhY2spIHtcbiAgICB2b2lkIHRyYWNrO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaGFuZGxlKFxuICBxdWVyeTogc3RyaW5nLFxuICBjb250ZXh0OiBFeHRyYWN0b3JTZWFyY2hDb250ZXh0KVxuICA6IFByb21pc2U8RXh0cmFjdG9ySW5mbz4ge1xuICAgIHN3aXRjaCAoY29udGV4dC50eXBlKSB7XG4gICAgICBjYXNlIFF1ZXJ5VHlwZS5WSU1FTzp7XG4gICAgICAgICAgY29uc3QgdHJhY2tJbmZvID0gYXdhaXQgVmltZW8uZ2V0SW5mbyhcbiAgICAgICAgICAgIHF1ZXJ5LlxuICAgICAgICAgICAgc3BsaXQoJy8nKS5cbiAgICAgICAgICAgIGZpbHRlcigoeCkgPT4gISF4KS5cbiAgICAgICAgICAgIHBvcCgpIVxuICAgICAgICAgICkuY2F0Y2goVXRpbC5ub29wKTtcblxuICAgICAgICAgIGlmICghdHJhY2tJbmZvKSByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG5cbiAgICAgICAgICBjb25zdCB0cmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICB0aXRsZTogdHJhY2tJbmZvLnRpdGxlLFxuICAgICAgICAgICAgdXJsOiB0cmFja0luZm8udXJsLFxuICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVModHJhY2tJbmZvLmR1cmF0aW9uIHx8IDApKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgJHt0cmFja0luZm8udGl0bGV9IGJ5ICR7dHJhY2tJbmZvLmF1dGhvci5uYW1lfWAsXG4gICAgICAgICAgICB0aHVtYm5haWw6IHRyYWNrSW5mby50aHVtYm5haWwsXG4gICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgIGF1dGhvcjogdHJhY2tJbmZvLmF1dGhvci5uYW1lLFxuICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICBzb3VyY2U6ICdhcmJpdHJhcnknLFxuICAgICAgICAgICAgZW5naW5lOiB0cmFja0luZm8uc3RyZWFtLFxuICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICBtZXRhZGF0YTogdHJhY2tJbmZvLFxuICAgICAgICAgICAgYXN5bmMgcmVxdWVzdE1ldGFkYXRhKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJhY2tJbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFt0cmFja10gfTtcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBlbXB0eVJlc3BvbnNlKCk6IEV4dHJhY3RvckluZm8ge1xuICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RyZWFtKGluZm86IFRyYWNrKSB7XG4gICAgY29uc3QgZW5naW5lID0gaW5mby5yYXcuZW5naW5lIGFzIHN0cmluZztcbiAgICBpZiAoZW5naW5lKSB7XG4gICAgICByZXR1cm4gZW5naW5lO1xuICAgIH1cblxuICAgIGNvbnN0IHRyYWNrID0gYXdhaXQgVmltZW8uZ2V0SW5mbyhpbmZvLnVybCkuY2F0Y2goVXRpbC5ub29wKTtcbiAgICBpZiAoIXRyYWNrIHx8ICF0cmFjay5zdHJlYW0pXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZXh0cmFjdCBzdHJlYW0gZnJvbSB0aGlzIHNvdXJjZScpO1xuXG4gICAgaW5mby5yYXcuZW5naW5lID0ge1xuICAgICAgc3RyZWFtVVJMOiB0cmFjay5zdHJlYW1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHRyYWNrLnN0cmVhbTtcbiAgfVxufSIsICJpbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgeyBmZXRjaCB9IGZyb20gJy4vaGVscGVyJztcblxuY2xhc3MgVmltZW8ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVGhlICR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSBjbGFzcyBtYXkgbm90IGJlIGluc3RhbnRpYXRlZCFgXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7UmVhZGFibGV9IFJlYWRhYmxlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBEb3dubG9hZHMgZnJvbSB2aW1lb1xuICAgKiBAcGFyYW0ge251bWJlcn0gaWQgVmltZW8gdmlkZW8gaWRcbiAgICogQHJldHVybnMge1Byb21pc2U8UmVhZGFibGU+fVxuICAgKi9cbiAgc3RhdGljIGRvd25sb2FkKGlkOiBudW1iZXIgfCBzdHJpbmcpOiBQcm9taXNlPFJlYWRhYmxlPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBpbmZvID0gYXdhaXQgVmltZW8uZ2V0SW5mbyhpZCk7XG4gICAgICBpZiAoIWluZm8pIHJldHVybiBudWxsO1xuXG4gICAgICBjb25zdCBkb3dubG9hZGVyID0gaW5mby5zdHJlYW0uc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSA/IGh0dHBzIDogaHR0cDtcblxuICAgICAgZG93bmxvYWRlci5nZXQoaW5mby5zdHJlYW0sIChyZXMpID0+IHtcbiAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB2aWRlbyBpbmZvXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZCBWaWRlbyBpZFxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGdldEluZm8oaWQ6IG51bWJlciB8IHN0cmluZyk6IFByb21pc2U8VmltZW9JbmZvIHwgbnVsbD4ge1xuICAgIGlmICghaWQpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpZCcpO1xuICAgIGNvbnN0IHVybCA9IGBodHRwczovL3BsYXllci52aW1lby5jb20vdmlkZW8vJHtpZH1gO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKFxuICAgICAgICBkYXRhLnNwbGl0KCd3aW5kb3cucGxheWVyQ29uZmlnID0nKVsxXS5zcGxpdCgnOycpWzBdLnRyaW0oKVxuICAgICAgKTtcblxuICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICBpZDoganNvbi52aWRlby5pZCxcbiAgICAgICAgZHVyYXRpb246IGpzb24udmlkZW8uZHVyYXRpb24gKiAxMDAwLFxuICAgICAgICB0aXRsZToganNvbi52aWRlby50aXRsZSxcbiAgICAgICAgdXJsOiBqc29uLnZpZGVvLnVybCxcbiAgICAgICAgdGh1bWJuYWlsOiBqc29uLnZpZGVvLnRodW1ic1snMTI4MCddIHx8IGpzb24udmlkZW8udGh1bWJzLmJhc2UsXG4gICAgICAgIHN0cmVhbToganNvbi5yZXF1ZXN0LmZpbGVzLnByb2dyZXNzaXZlWzBdLnVybCxcbiAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgaWQ6IGpzb24udmlkZW8ub3duZXIuaWQsXG4gICAgICAgICAgbmFtZToganNvbi52aWRlby5vd25lci5uYW1lLFxuICAgICAgICAgIHVybDoganNvbi52aWRlby5vd25lci51cmwsXG4gICAgICAgICAgYXZhdGFyOiBqc29uLnZpZGVvLm93bmVyLmltZ18yeCB8fCBqc29uLnZpZGVvLm93bmVyLmltZ1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmltZW9JbmZvIHtcbiAgaWQ6IG51bWJlcjtcbiAgZHVyYXRpb246IG51bWJlcjtcbiAgdGl0bGU6IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG4gIHRodW1ibmFpbDogc3RyaW5nO1xuICBzdHJlYW06IHN0cmluZztcbiAgYXV0aG9yOiB7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgYXZhdGFyOiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCB7IFZpbWVvIH07IiwgIi8vIHByZXR0aWVyLWlnbm9yZVxuaW1wb3J0IHtcbiAgQmFzZUV4dHJhY3RvcixcbiAgRXh0cmFjdG9ySW5mbyxcbiAgRXh0cmFjdG9yU2VhcmNoQ29udGV4dCxcbiAgUXVlcnlUeXBlLFxuICBTZWFyY2hRdWVyeVR5cGUsXG4gIFRyYWNrLFxuICBVdGlsIH0gZnJvbVxuJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCByZXZlcmJuYXRpb24gZnJvbSAncmV2ZXJibmF0aW9uLXNjcmFwZXInO1xuXG5leHBvcnQgY2xhc3MgUmV2ZXJibmF0aW9uRXh0cmFjdG9yIGV4dGVuZHMgQmFzZUV4dHJhY3RvciB7XG4gIHB1YmxpYyBzdGF0aWMgaWRlbnRpZmllciA9XG4gICdjb20uZGlzY29yZC1wbGF5ZXIucmV2ZXJibmF0aW9uZXh0cmFjdG9yJyBhcyBjb25zdDtcblxuICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUoXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIHR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBudWxsIHwgdW5kZWZpbmVkKVxuICA6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmICh0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIChbUXVlcnlUeXBlLlJFVkVSQk5BVElPTl0gYXMgU2VhcmNoUXVlcnlUeXBlW10pLnNvbWUoXG4gICAgICAocikgPT4gciA9PT0gdHlwZVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0UmVsYXRlZFRyYWNrcyh0cmFjazogVHJhY2spIHtcbiAgICB2b2lkIHRyYWNrO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaGFuZGxlKFxuICBxdWVyeTogc3RyaW5nLFxuICBjb250ZXh0OiBFeHRyYWN0b3JTZWFyY2hDb250ZXh0KVxuICA6IFByb21pc2U8RXh0cmFjdG9ySW5mbz4ge1xuICAgIHN3aXRjaCAoY29udGV4dC50eXBlKSB7XG4gICAgICBjYXNlIFF1ZXJ5VHlwZS5SRVZFUkJOQVRJT046e1xuICAgICAgICAgIGNvbnN0IHRyYWNrSW5mbyA9IGF3YWl0IHJldmVyYm5hdGlvbi5nZXRJbmZvKHF1ZXJ5KS5jYXRjaChVdGlsLm5vb3ApO1xuXG4gICAgICAgICAgaWYgKCF0cmFja0luZm8pIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcblxuICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgIHRpdGxlOiB0cmFja0luZm8udGl0bGUsXG4gICAgICAgICAgICB1cmw6IHRyYWNrSW5mby51cmwsXG4gICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyh0cmFja0luZm8uZHVyYXRpb24pKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgdHJhY2tJbmZvLmx5cmljcyB8fFxuICAgICAgICAgICAgYCR7dHJhY2tJbmZvLnRpdGxlfSBieSAke3RyYWNrSW5mby5hcnRpc3QubmFtZX1gLFxuICAgICAgICAgICAgdGh1bWJuYWlsOiB0cmFja0luZm8udGh1bWJuYWlsLFxuICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICBhdXRob3I6IHRyYWNrSW5mby5hcnRpc3QubmFtZSxcbiAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgc291cmNlOiAnYXJiaXRyYXJ5JyxcbiAgICAgICAgICAgIGVuZ2luZTogdHJhY2tJbmZvLnN0cmVhbVVSTCxcbiAgICAgICAgICAgIHF1ZXJ5VHlwZTogY29udGV4dC50eXBlLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgIGFzeW5jIHJlcXVlc3RNZXRhZGF0YSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrSW5mbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbdHJhY2tdIH07XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZW1wdHlSZXNwb25zZSgpOiBFeHRyYWN0b3JJbmZvIHtcbiAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0cmVhbShpbmZvOiBUcmFjaykge1xuICAgIGNvbnN0IGVuZ2luZSA9IGluZm8ucmF3LmVuZ2luZSBhcyBzdHJpbmc7XG4gICAgaWYgKGVuZ2luZSkge1xuICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICB9XG5cbiAgICBjb25zdCB0cmFjayA9IGF3YWl0IHJldmVyYm5hdGlvbi5nZXRJbmZvKGluZm8udXJsKS5jYXRjaChVdGlsLm5vb3ApO1xuICAgIGlmICghdHJhY2sgfHwgIXRyYWNrLnN0cmVhbVVSTClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBleHRyYWN0IHN0cmVhbSBmcm9tIHRoaXMgc291cmNlJyk7XG5cbiAgICBpbmZvLnJhdy5lbmdpbmUgPSB7XG4gICAgICBzdHJlYW1VUkw6IHRyYWNrLnN0cmVhbVVSTFxuICAgIH07XG5cbiAgICByZXR1cm4gdHJhY2suc3RyZWFtVVJMO1xuICB9XG59IiwgIi8vIHByZXR0aWVyLWlnbm9yZVxuaW1wb3J0IHtcbiAgQmFzZUV4dHJhY3RvcixcbiAgRXh0cmFjdG9ySW5mbyxcbiAgRXh0cmFjdG9yU2VhcmNoQ29udGV4dCxcbiAgUXVlcnlUeXBlLFxuICBTZWFyY2hRdWVyeVR5cGUsXG4gIFRyYWNrLFxuICBVdGlsIH0gZnJvbVxuJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCB0eXBlIHsgSW5jb21pbmdNZXNzYWdlIH0gZnJvbSAnaHR0cCc7XG5pbXBvcnQgeyBjcmVhdGVSZWFkU3RyZWFtLCBleGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgZG93bmxvYWRTdHJlYW0gfSBmcm9tICcuLi9pbnRlcm5hbC9kb3dubG9hZGVyJztcbmltcG9ydCAqIGFzIGZpbGVUeXBlIGZyb20gJ2ZpbGUtdHlwZSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHN0YXQgfSBmcm9tICdmcy9wcm9taXNlcyc7XG5cbmNvbnN0IEFUVEFDSE1FTlRfSEVBREVSID0gWydhdWRpby8nLCAndmlkZW8vJywgJ2FwcGxpY2F0aW9uL29nZyddIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgQXR0YWNobWVudEV4dHJhY3RvciBleHRlbmRzIEJhc2VFeHRyYWN0b3Ige1xuICBwdWJsaWMgc3RhdGljIGlkZW50aWZpZXIgPSAnY29tLmRpc2NvcmQtcGxheWVyLmF0dGFjaG1lbnRleHRyYWN0b3InIGFzIGNvbnN0O1xuXG4gIC8vIHVzZSBsb3dlc3QgcHJpb3JpdHkgdG8gYXZvaWQgY29uZmxpY3Qgd2l0aCBvdGhlciBleHRyYWN0b3JzXG4gIHB1YmxpYyBwcmlvcml0eSA9IDA7XG5cbiAgcHVibGljIGFzeW5jIHZhbGlkYXRlKFxuICBxdWVyeTogc3RyaW5nLFxuICB0eXBlPzogU2VhcmNoUXVlcnlUeXBlIHwgbnVsbCB8IHVuZGVmaW5lZClcbiAgOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAoW1F1ZXJ5VHlwZS5BUkJJVFJBUlksIFF1ZXJ5VHlwZS5GSUxFXSBhcyBTZWFyY2hRdWVyeVR5cGVbXSkuc29tZShcbiAgICAgIChyKSA9PiByID09PSB0eXBlXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRSZWxhdGVkVHJhY2tzKHRyYWNrOiBUcmFjaykge1xuICAgIHZvaWQgdHJhY2s7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBoYW5kbGUoXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpXG4gIDogUHJvbWlzZTxFeHRyYWN0b3JJbmZvPiB7XG4gICAgc3dpdGNoIChjb250ZXh0LnR5cGUpIHtcbiAgICAgIGNhc2UgUXVlcnlUeXBlLkFSQklUUkFSWTp7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IChhd2FpdCBkb3dubG9hZFN0cmVhbShcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgY29udGV4dC5yZXF1ZXN0T3B0aW9uc1xuICAgICAgICAgICkpIGFzIEluY29taW5nTWVzc2FnZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgIUFUVEFDSE1FTlRfSEVBREVSLnNvbWUoXG4gICAgICAgICAgICAocikgPT4gISFkYXRhLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddPy5zdGFydHNXaXRoKHIpXG4gICAgICAgICAgKSlcblxuICAgICAgICAgIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcblxuICAgICAgICAgIGNvbnN0IHRyYWNrSW5mbyA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAoXG4gICAgICAgICAgICBxdWVyeS5cbiAgICAgICAgICAgIHNwbGl0KCcvJykuXG4gICAgICAgICAgICBmaWx0ZXIoKHgpID0+IHgubGVuZ3RoKS5cbiAgICAgICAgICAgIHBvcCgpID8/ICdBdHRhY2htZW50JykuXG5cbiAgICAgICAgICAgIHNwbGl0KCc/JylbMF0uXG4gICAgICAgICAgICB0cmltKCksXG4gICAgICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgICAgIHRodW1ibmFpbDpcbiAgICAgICAgICAgICdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zLzIvMmEvSVR1bmVzXzEyLjJfbG9nby5wbmcnLFxuICAgICAgICAgICAgZW5naW5lOiBxdWVyeSxcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgYXV0aG9yOiAoZGF0YSBhcyBhbnkpLmNsaWVudD8uc2VydmVybmFtZSBhcyBzdHJpbmcgfHwgJ0F0dGFjaG1lbnQnLFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgIChkYXRhIGFzIGFueSkuY2xpZW50Py5zZXJ2ZXJuYW1lIGFzIHN0cmluZyB8fCAnQXR0YWNobWVudCcsXG4gICAgICAgICAgICB1cmw6IGRhdGEudXJsIHx8IHF1ZXJ5XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGNvbnN0IG1lZGlhcGxleCA9IHJlcXVpcmUoJ21lZGlhcGxleCcpIGFzIHR5cGVvZiBpbXBvcnQoJ21lZGlhcGxleCcpO1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHRoaXMuY29udGV4dC5wbGF5ZXIub3B0aW9ucy5wcm9iZVRpbWVvdXQgPz8gNTAwMDtcblxuICAgICAgICAgICAgY29uc3QgeyByZXN1bHQsIHN0cmVhbSB9ID0gKGF3YWl0IFByb21pc2UucmFjZShbXG4gICAgICAgICAgICBtZWRpYXBsZXgucHJvYmVTdHJlYW0oZGF0YSksXG4gICAgICAgICAgICBuZXcgUHJvbWlzZSgoXywgcikgPT4ge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHIobmV3IEVycm9yKCdUaW1lb3V0JykpLCB0aW1lb3V0KTtcbiAgICAgICAgICAgIH0pXVxuICAgICAgICAgICAgKSkgYXMgQXdhaXRlZDxSZXR1cm5UeXBlPHR5cGVvZiBtZWRpYXBsZXgucHJvYmVTdHJlYW0+PjtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICB0cmFja0luZm8uZHVyYXRpb24gPSByZXN1bHQuZHVyYXRpb24gKiAxMDAwO1xuXG4gICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gbWVkaWFwbGV4LnJlYWRNZXRhZGF0YShyZXN1bHQpO1xuICAgICAgICAgICAgICBpZiAobWV0YWRhdGEuYXV0aG9yKSB0cmFja0luZm8uYXV0aG9yID0gbWV0YWRhdGEuYXV0aG9yO1xuICAgICAgICAgICAgICBpZiAobWV0YWRhdGEudGl0bGUpIHRyYWNrSW5mby50aXRsZSA9IG1ldGFkYXRhLnRpdGxlO1xuXG4gICAgICAgICAgICAgIHRyYWNrSW5mby5kZXNjcmlwdGlvbiA9IGAke3RyYWNrSW5mby50aXRsZX0gYnkgJHt0cmFja0luZm8uYXV0aG9yfWA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgfSBjYXRjaCB7XG5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgIHRpdGxlOiB0cmFja0luZm8udGl0bGUsXG4gICAgICAgICAgICB1cmw6IHRyYWNrSW5mby51cmwsXG4gICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyh0cmFja0luZm8uZHVyYXRpb24pKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0cmFja0luZm8uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB0aHVtYm5haWw6IHRyYWNrSW5mby50aHVtYm5haWwsXG4gICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgIGF1dGhvcjogdHJhY2tJbmZvLmF1dGhvcixcbiAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgc291cmNlOiAnYXJiaXRyYXJ5JyxcbiAgICAgICAgICAgIGVuZ2luZTogdHJhY2tJbmZvLnVybCxcbiAgICAgICAgICAgIHF1ZXJ5VHlwZTogY29udGV4dC50eXBlLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgIGFzeW5jIHJlcXVlc3RNZXRhZGF0YSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrSW5mbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICB0cmFjay5yYXcuaXNGaWxlID0gZmFsc2U7XG5cbiAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbdHJhY2tdIH07XG4gICAgICAgIH1cbiAgICAgIGNhc2UgUXVlcnlUeXBlLkZJTEU6e1xuICAgICAgICAgIGlmICghZXhpc3RzU3luYyhxdWVyeSkpIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcbiAgICAgICAgICBjb25zdCBmc3RhdCA9IGF3YWl0IHN0YXQocXVlcnkpO1xuICAgICAgICAgIGlmICghZnN0YXQuaXNGaWxlKCkpIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcbiAgICAgICAgICBjb25zdCBtaW1lID0gYXdhaXQgZmlsZVR5cGUuZnJvbUZpbGUocXVlcnkpLmNhdGNoKCgpID0+IG51bGwpO1xuICAgICAgICAgIGlmICghbWltZSB8fCAhQVRUQUNITUVOVF9IRUFERVIuc29tZSgocikgPT4gISFtaW1lLm1pbWUuc3RhcnRzV2l0aChyKSkpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuXG4gICAgICAgICAgY29uc3QgdHJhY2tJbmZvID0ge1xuICAgICAgICAgICAgdGl0bGU6IHBhdGguYmFzZW5hbWUocXVlcnkpIHx8ICdBdHRhY2htZW50JyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICAgICAgdGh1bWJuYWlsOlxuICAgICAgICAgICAgJ2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvMi8yYS9JVHVuZXNfMTIuMl9sb2dvLnBuZycsXG4gICAgICAgICAgICBlbmdpbmU6IHF1ZXJ5LFxuICAgICAgICAgICAgYXV0aG9yOiAnQXR0YWNobWVudCcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0F0dGFjaG1lbnQnLFxuICAgICAgICAgICAgdXJsOiBxdWVyeVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICBjb25zdCBtZWRpYXBsZXggPSByZXF1aXJlKCdtZWRpYXBsZXgnKSBhcyB0eXBlb2YgaW1wb3J0KCdtZWRpYXBsZXgnKTtcblxuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHRoaXMuY29udGV4dC5wbGF5ZXIub3B0aW9ucy5wcm9iZVRpbWVvdXQgPz8gNTAwMDtcblxuICAgICAgICAgICAgY29uc3QgeyByZXN1bHQsIHN0cmVhbSB9ID0gKGF3YWl0IFByb21pc2UucmFjZShbXG4gICAgICAgICAgICBtZWRpYXBsZXgucHJvYmVTdHJlYW0oXG4gICAgICAgICAgICAgIGNyZWF0ZVJlYWRTdHJlYW0ocXVlcnksIHtcbiAgICAgICAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICAgICAgICBlbmQ6IDEwMjQgKiAxMDI0ICogMTBcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBuZXcgUHJvbWlzZSgoXywgcikgPT4ge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHIobmV3IEVycm9yKCdUaW1lb3V0JykpLCB0aW1lb3V0KTtcbiAgICAgICAgICAgIH0pXVxuICAgICAgICAgICAgKSkgYXMgQXdhaXRlZDxSZXR1cm5UeXBlPHR5cGVvZiBtZWRpYXBsZXgucHJvYmVTdHJlYW0+PjtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICB0cmFja0luZm8uZHVyYXRpb24gPSByZXN1bHQuZHVyYXRpb24gKiAxMDAwO1xuXG4gICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gbWVkaWFwbGV4LnJlYWRNZXRhZGF0YShyZXN1bHQpO1xuICAgICAgICAgICAgICBpZiAobWV0YWRhdGEuYXV0aG9yKSB0cmFja0luZm8uYXV0aG9yID0gbWV0YWRhdGEuYXV0aG9yO1xuICAgICAgICAgICAgICBpZiAobWV0YWRhdGEudGl0bGUpIHRyYWNrSW5mby50aXRsZSA9IG1ldGFkYXRhLnRpdGxlO1xuXG4gICAgICAgICAgICAgIHRyYWNrSW5mby5kZXNjcmlwdGlvbiA9IGAke3RyYWNrSW5mby50aXRsZX0gYnkgJHt0cmFja0luZm8uYXV0aG9yfWA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgfSBjYXRjaCB7XG5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgIHRpdGxlOiB0cmFja0luZm8udGl0bGUsXG4gICAgICAgICAgICB1cmw6IHRyYWNrSW5mby51cmwsXG4gICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyh0cmFja0luZm8uZHVyYXRpb24pKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0cmFja0luZm8uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB0aHVtYm5haWw6IHRyYWNrSW5mby50aHVtYm5haWwsXG4gICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgIGF1dGhvcjogdHJhY2tJbmZvLmF1dGhvcixcbiAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgc291cmNlOiAnYXJiaXRyYXJ5JyxcbiAgICAgICAgICAgIGVuZ2luZTogdHJhY2tJbmZvLnVybCxcbiAgICAgICAgICAgIHF1ZXJ5VHlwZTogY29udGV4dC50eXBlLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgIGFzeW5jIHJlcXVlc3RNZXRhZGF0YSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrSW5mbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICB0cmFjay5yYXcuaXNGaWxlID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFt0cmFja10gfTtcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBlbXB0eVJlc3BvbnNlKCk6IEV4dHJhY3RvckluZm8ge1xuICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RyZWFtKGluZm86IFRyYWNrKSB7XG4gICAgY29uc3QgZW5naW5lID0gaW5mby5yYXcuZW5naW5lIGFzIHN0cmluZztcblxuICAgIGNvbnN0IGlzRmlsZSA9IGluZm8ucmF3LmlzRmlsZSBhcyBib29sZWFuO1xuXG4gICAgaWYgKCFlbmdpbmUpIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgc3RyZWFtIHNvdXJjZScpO1xuXG4gICAgaWYgKCFpc0ZpbGUpIHtcbiAgICAgIHJldHVybiBlbmdpbmU7XG4gICAgICAvLyByZXR1cm4gYXdhaXQgZG93bmxvYWRTdHJlYW0oZW5naW5lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlUmVhZFN0cmVhbShlbmdpbmUpO1xuICB9XG59IiwgImltcG9ydCBodHRwLCB7IFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnaHR0cCc7XG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuXG5leHBvcnQgZnVuY3Rpb24gZG93bmxvYWRTdHJlYW0odXJsOiBzdHJpbmcsIG9wdHM6IFJlcXVlc3RPcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPFJlYWRhYmxlPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgbGliID0gdXJsLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSA/IGh0dHAgOiBodHRwcztcblxuICAgIGxpYi5nZXQodXJsLCBvcHRzLCAocmVzKSA9PiByZXNvbHZlKHJlcykpLm9uY2UoJ2Vycm9yJywgcmVqZWN0KTtcbiAgfSk7XG59IiwgImltcG9ydCB7XG4gIEV4dHJhY3RvckluZm8sXG4gIEV4dHJhY3RvclNlYXJjaENvbnRleHQsXG4gIEV4dHJhY3RvclN0cmVhbWFibGUsXG4gIEd1aWxkUXVldWVIaXN0b3J5LFxuICBQbGF5bGlzdCxcbiAgUXVlcnlUeXBlLFxuICBTZWFyY2hRdWVyeVR5cGUsXG4gIFRyYWNrLFxuICBVdGlsLFxuICBCYXNlRXh0cmFjdG9yIH0gZnJvbVxuJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCB7IEFwcGxlTXVzaWMgfSBmcm9tICcuLi9pbnRlcm5hbCc7XG5pbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBTdHJlYW1GTiB9IGZyb20gJy4uL3R5cGVzL2NvbW1vbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGVNdXNpY0V4dHJhY3RvckluaXQge1xuICBjcmVhdGVTdHJlYW0/OiAoXG4gIGV4dDogQXBwbGVNdXNpY0V4dHJhY3RvcixcbiAgdXJsOiBzdHJpbmcsXG4gIHRyYWNrOiBUcmFjaylcbiAgPT4gUHJvbWlzZTxSZWFkYWJsZSB8IHN0cmluZz47XG59XG5cbmV4cG9ydCBjbGFzcyBBcHBsZU11c2ljRXh0cmFjdG9yIGV4dGVuZHMgQmFzZUV4dHJhY3RvcjxBcHBsZU11c2ljRXh0cmFjdG9ySW5pdD4ge1xuICBwdWJsaWMgc3RhdGljIGlkZW50aWZpZXIgPSAnY29tLmRpc2NvcmQtcGxheWVyLmFwcGxlbXVzaWNleHRyYWN0b3InIGFzIGNvbnN0O1xuICBwcml2YXRlIF9zdHJlYW0hOiBTdHJlYW1GTjtcblxuICBwdWJsaWMgYXN5bmMgYWN0aXZhdGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5wcm90b2NvbHMgPSBbJ2Ftc2VhcmNoJywgJ2FwcGxlbXVzaWMnXTtcbiAgICBjb25zdCBmbiA9IHRoaXMub3B0aW9ucy5jcmVhdGVTdHJlYW07XG5cbiAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9zdHJlYW0gPSAocTogc3RyaW5nLCB0OiBUcmFjaykgPT4ge1xuICAgICAgICByZXR1cm4gZm4odGhpcywgcSwgdCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWFjdGl2YXRlKCkge1xuICAgIHRoaXMucHJvdG9jb2xzID0gW107XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUoXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIHR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBudWxsIHwgdW5kZWZpbmVkKVxuICA6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHJldHVybiAoPFNlYXJjaFF1ZXJ5VHlwZVtdPiBbXG4gICAgUXVlcnlUeXBlLkFQUExFX01VU0lDX0FMQlVNLFxuICAgIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19QTEFZTElTVCxcbiAgICBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfU09ORyxcbiAgICBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfU0VBUkNILFxuICAgIFF1ZXJ5VHlwZS5BVVRPLFxuICAgIFF1ZXJ5VHlwZS5BVVRPX1NFQVJDSF0pLlxuICAgIHNvbWUoKHQpID0+IHQgPT09IHR5cGUpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFJlbGF0ZWRUcmFja3ModHJhY2s6IFRyYWNrLCBoaXN0b3J5OiBHdWlsZFF1ZXVlSGlzdG9yeSkge1xuICAgIGlmICh0cmFjay5xdWVyeVR5cGUgPT09IFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19TT05HKSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5oYW5kbGUodHJhY2suYXV0aG9yIHx8IHRyYWNrLnRpdGxlLCB7XG4gICAgICAgIHR5cGU6IFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19TRUFSQ0gsXG4gICAgICAgIHJlcXVlc3RlZEJ5OiB0cmFjay5yZXF1ZXN0ZWRCeVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHVuaXF1ZSA9IGRhdGEudHJhY2tzLmZpbHRlcihcbiAgICAgICAgKHQpID0+ICFoaXN0b3J5LnRyYWNrcy5zb21lKChoKSA9PiBoLnVybCA9PT0gdC51cmwpXG4gICAgICApO1xuICAgICAgcmV0dXJuIHVuaXF1ZS5sZW5ndGggPiAwID9cbiAgICAgIHRoaXMuY3JlYXRlUmVzcG9uc2UobnVsbCwgdW5pcXVlKSA6XG4gICAgICB0aGlzLmNyZWF0ZVJlc3BvbnNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBoYW5kbGUoXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpXG4gIDogUHJvbWlzZTxFeHRyYWN0b3JJbmZvPiB7XG4gICAgaWYgKGNvbnRleHQucHJvdG9jb2wgPT09ICdhbXNlYXJjaCcpXG4gICAgY29udGV4dC50eXBlID0gUXVlcnlUeXBlLkFQUExFX01VU0lDX1NFQVJDSDtcblxuICAgIHN3aXRjaCAoY29udGV4dC50eXBlKSB7XG4gICAgICBjYXNlIFF1ZXJ5VHlwZS5BVVRPOlxuICAgICAgY2FzZSBRdWVyeVR5cGUuQVVUT19TRUFSQ0g6XG4gICAgICBjYXNlIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19TRUFSQ0g6e1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBBcHBsZU11c2ljLnNlYXJjaChxdWVyeSk7XG4gICAgICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLmxlbmd0aCkgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgICAgICAgICBjb25zdCB0cmFja3MgPSBkYXRhLm1hcChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAobTogYW55KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHRyYWNrOiBUcmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgYXV0aG9yOiBtLmFydGlzdC5uYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtLnRpdGxlLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOlxuICAgICAgICAgICAgICAgIHR5cGVvZiBtLmR1cmF0aW9uID09PSAnbnVtYmVyJyA/XG4gICAgICAgICAgICAgICAgVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhtLmR1cmF0aW9uKSkgOlxuICAgICAgICAgICAgICAgIG0uZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBtLnRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICB0aXRsZTogbS50aXRsZSxcbiAgICAgICAgICAgICAgICB1cmw6IG0udXJsLFxuICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogJ2FwcGxlX211c2ljJyxcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICBxdWVyeVR5cGU6ICdhcHBsZU11c2ljU29uZycsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgIHNvdXJjZTogbSxcbiAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG0sXG4gICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZShudWxsLCB0cmFja3MpO1xuICAgICAgICB9XG4gICAgICBjYXNlIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19BTEJVTTp7XG4gICAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IEFwcGxlTXVzaWMuZ2V0QWxidW1JbmZvKHF1ZXJ5KTtcbiAgICAgICAgICBpZiAoIWluZm8pIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKCk7XG5cbiAgICAgICAgICBjb25zdCBwbGF5bGlzdCA9IG5ldyBQbGF5bGlzdCh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgbmFtZTogaW5mby5hcnRpc3QubmFtZSxcbiAgICAgICAgICAgICAgdXJsOiAnJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBpbmZvLnRpdGxlLFxuICAgICAgICAgICAgaWQ6IGluZm8uaWQsXG4gICAgICAgICAgICBzb3VyY2U6ICdhcHBsZV9tdXNpYycsXG4gICAgICAgICAgICB0aHVtYm5haWw6IGluZm8udGh1bWJuYWlsLFxuICAgICAgICAgICAgdGl0bGU6IGluZm8udGl0bGUsXG4gICAgICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICAgICAgdHlwZTogJ2FsYnVtJyxcbiAgICAgICAgICAgIHVybDogaW5mby51cmwsXG4gICAgICAgICAgICByYXdQbGF5bGlzdDogaW5mb1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcGxheWxpc3QudHJhY2tzID0gaW5mby50cmFja3MubWFwKFxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgbSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICA6IGFueSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB0cmFjazogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgIGF1dGhvcjogbS5hcnRpc3QubmFtZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbS50aXRsZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjpcbiAgICAgICAgICAgICAgICB0eXBlb2YgbS5kdXJhdGlvbiA9PT0gJ251bWJlcicgP1xuICAgICAgICAgICAgICAgIFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMobS5kdXJhdGlvbikpIDpcbiAgICAgICAgICAgICAgICBtLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogbS50aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgdGl0bGU6IG0udGl0bGUsXG4gICAgICAgICAgICAgICAgdXJsOiBtLnVybCxcbiAgICAgICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgICAgICBzb3VyY2U6ICdhcHBsZV9tdXNpYycsXG4gICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgcXVlcnlUeXBlOiAnYXBwbGVNdXNpY1NvbmcnLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IGluZm8sXG4gICAgICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBpbmZvLFxuICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdHJhY2sucGxheWxpc3QgPSBwbGF5bGlzdDtcbiAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdCwgdHJhY2tzOiBwbGF5bGlzdC50cmFja3MgfTtcbiAgICAgICAgfVxuICAgICAgY2FzZSBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfUExBWUxJU1Q6e1xuICAgICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBBcHBsZU11c2ljLmdldFBsYXlsaXN0SW5mbyhxdWVyeSk7XG4gICAgICAgICAgaWYgKCFpbmZvKSByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuXG4gICAgICAgICAgY29uc3QgcGxheWxpc3QgPSBuZXcgUGxheWxpc3QodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgIG5hbWU6IGluZm8uYXJ0aXN0Lm5hbWUsXG4gICAgICAgICAgICAgIHVybDogJydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogaW5mby50aXRsZSxcbiAgICAgICAgICAgIGlkOiBpbmZvLmlkLFxuICAgICAgICAgICAgc291cmNlOiAnYXBwbGVfbXVzaWMnLFxuICAgICAgICAgICAgdGh1bWJuYWlsOiBpbmZvLnRodW1ibmFpbCxcbiAgICAgICAgICAgIHRpdGxlOiBpbmZvLnRpdGxlLFxuICAgICAgICAgICAgdHJhY2tzOiBbXSxcbiAgICAgICAgICAgIHR5cGU6ICdwbGF5bGlzdCcsXG4gICAgICAgICAgICB1cmw6IGluZm8udXJsLFxuICAgICAgICAgICAgcmF3UGxheWxpc3Q6IGluZm9cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHBsYXlsaXN0LnRyYWNrcyA9IGluZm8udHJhY2tzLm1hcChcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgIG0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgdHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICBhdXRob3I6IG0uYXJ0aXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG0udGl0bGUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246XG4gICAgICAgICAgICAgICAgdHlwZW9mIG0uZHVyYXRpb24gPT09ICdudW1iZXInID9cbiAgICAgICAgICAgICAgICBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKG0uZHVyYXRpb24pKSA6XG4gICAgICAgICAgICAgICAgbS5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IG0udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBtLnRpdGxlLFxuICAgICAgICAgICAgICAgIHVybDogbS51cmwsXG4gICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgc291cmNlOiAnYXBwbGVfbXVzaWMnLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ2FwcGxlTXVzaWNTb25nJyxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgc291cmNlOiBtLFxuICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbSxcbiAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgdHJhY2sucGxheWxpc3QgPSBwbGF5bGlzdDtcbiAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICByZXR1cm4gdHJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0LCB0cmFja3M6IHBsYXlsaXN0LnRyYWNrcyB9O1xuICAgICAgICB9XG4gICAgICBjYXNlIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19TT05HOntcbiAgICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgQXBwbGVNdXNpYy5nZXRTb25nSW5mbyhxdWVyeSk7XG4gICAgICAgICAgaWYgKCFpbmZvKSByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuXG4gICAgICAgICAgY29uc3QgdHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgIGF1dGhvcjogaW5mby5hcnRpc3QubmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBpbmZvLnRpdGxlLFxuICAgICAgICAgICAgZHVyYXRpb246XG4gICAgICAgICAgICB0eXBlb2YgaW5mby5kdXJhdGlvbiA9PT0gJ251bWJlcicgP1xuICAgICAgICAgICAgVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhpbmZvLmR1cmF0aW9uKSkgOlxuICAgICAgICAgICAgaW5mby5kdXJhdGlvbixcbiAgICAgICAgICAgIHRodW1ibmFpbDogaW5mby50aHVtYm5haWwsXG4gICAgICAgICAgICB0aXRsZTogaW5mby50aXRsZSxcbiAgICAgICAgICAgIHVybDogaW5mby51cmwsXG4gICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgIHNvdXJjZTogJ2FwcGxlX211c2ljJyxcbiAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICBzb3VyY2U6IGluZm8sXG4gICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogaW5mbyxcbiAgICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbdHJhY2tdIH07XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0cmVhbShpbmZvOiBUcmFjayk6IFByb21pc2U8RXh0cmFjdG9yU3RyZWFtYWJsZT4ge1xuICAgIGlmICh0aGlzLl9zdHJlYW0pIHtcbiAgICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IHRoaXMuX3N0cmVhbShpbmZvLnVybCwgaW5mbyk7XG4gICAgICBpZiAodHlwZW9mIHN0cmVhbSA9PT0gJ3N0cmluZycpIHJldHVybiBzdHJlYW07XG4gICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cblxuICAgIC8vIG5ldyBhcGlcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNvbnRleHQucmVxdWVzdEJyaWRnZShpbmZvLCB0aGlzKTtcblxuICAgIGlmICghcmVzdWx0Py5yZXN1bHQpIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGJyaWRnZSB0aGlzIHRyYWNrJyk7XG5cbiAgICByZXR1cm4gcmVzdWx0LnJlc3VsdDtcbiAgfVxufSIsICJleHBvcnQgKiBmcm9tICcuL0FwcGxlTXVzaWMnO1xuZXhwb3J0ICogZnJvbSAnLi9WaW1lbyc7XG5leHBvcnQgKiBmcm9tICcuL2Rvd25sb2FkZXInO1xuZXhwb3J0ICogZnJvbSAnLi9TcG90aWZ5JzsiLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgUXVlcnlSZXNvbHZlciB9IGZyb20gJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCB7IHBhcnNlLCBIVE1MRWxlbWVudCB9IGZyb20gJ25vZGUtaHRtbC1wYXJzZXInO1xuaW1wb3J0IHsgVUEsIGZldGNoIH0gZnJvbSAnLi9oZWxwZXInO1xuXG5mdW5jdGlvbiBnZXRIVE1MKGxpbms6IHN0cmluZyk6IFByb21pc2U8SFRNTEVsZW1lbnQgfCBudWxsPiB7XG4gIHJldHVybiBmZXRjaChsaW5rLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgJ1VzZXItQWdlbnQnOiBVQVxuICAgIH1cbiAgfSkuXG4gIHRoZW4oKHIpID0+IHIudGV4dCgpKS5cbiAgdGhlbihcbiAgICAodHh0KSA9PiBwYXJzZSh0eHQpLFxuICAgICgpID0+IG51bGxcbiAgKTtcbn1cblxuZnVuY3Rpb24gbWFrZUltYWdlKHtcbiAgaGVpZ2h0LFxuICB1cmwsXG4gIHdpZHRoLFxuICBleHQgPSAnanBnJ1xuXG5cblxuXG5cbn06IHt1cmw6IHN0cmluZzt3aWR0aDogbnVtYmVyO2hlaWdodDogbnVtYmVyO2V4dD86IHN0cmluZzt9KSB7XG4gIHJldHVybiB1cmwuXG4gIHJlcGxhY2UoJ3t3fScsIGAke3dpZHRofWApLlxuICByZXBsYWNlKCd7aH0nLCBgJHtoZWlnaHR9YCkuXG4gIHJlcGxhY2UoJ3tmfScsIGV4dCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRHVyYXRpb24oZDogc3RyaW5nKSB7XG4gIGNvbnN0IHIgPSAobmFtZTogc3RyaW5nLCB1bml0OiBzdHJpbmcpID0+XG4gIGAoKD88JHtuYW1lfT4tP1xcXFxkKltcXFxcLixdP1xcXFxkKykke3VuaXR9KT9gO1xuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgW1xuICAgICcoPzxuZWdhdGl2ZT4tKT9QJyxcbiAgICByKCd5ZWFycycsICdZJyksXG4gICAgcignbW9udGhzJywgJ00nKSxcbiAgICByKCd3ZWVrcycsICdXJyksXG4gICAgcignZGF5cycsICdEJyksXG4gICAgJyhUJyxcbiAgICByKCdob3VycycsICdIJyksXG4gICAgcignbWludXRlcycsICdNJyksXG4gICAgcignc2Vjb25kcycsICdTJyksXG4gICAgJyk/JyAvLyBlbmQgb3B0aW9uYWwgdGltZVxuICAgIF0uam9pbignJylcbiAgKTtcbiAgY29uc3QgdGVzdCA9IHJlZ2V4LmV4ZWMoZCk7XG4gIGlmICghdGVzdCB8fCAhdGVzdC5ncm91cHMpIHJldHVybiAnMDowMCc7XG5cbiAgY29uc3QgZHVyID0gW1xuICB0ZXN0Lmdyb3Vwcy55ZWFycyxcbiAgdGVzdC5ncm91cHMubW9udGhzLFxuICB0ZXN0Lmdyb3Vwcy53ZWVrcyxcbiAgdGVzdC5ncm91cHMuZGF5cyxcbiAgdGVzdC5ncm91cHMuaG91cnMsXG4gIHRlc3QuZ3JvdXBzLm1pbnV0ZXMsXG4gIHRlc3QuZ3JvdXBzLnNlY29uZHNdO1xuXG5cbiAgcmV0dXJuIChcbiAgICBkdXIuXG4gICAgZmlsdGVyKChyLCBpLCBhKSA9PiAhIXIgfHwgaSA+IGEubGVuZ3RoIC0gMikuXG4gICAgbWFwKChtLCBpKSA9PiB7XG4gICAgICBpZiAoIW0pIG0gPSAnMCc7XG4gICAgICByZXR1cm4gaSA8IDEgPyBtIDogbS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIH0pLlxuICAgIGpvaW4oJzonKSB8fCAnMDowMCcpO1xuXG59XG5cbmV4cG9ydCBjbGFzcyBBcHBsZU11c2ljIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHJldHVybiBBcHBsZU11c2ljO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBhc3luYyBzZWFyY2gocXVlcnk6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9tdXNpYy5hcHBsZS5jb20vdXMvc2VhcmNoP3Rlcm09JHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgIHF1ZXJ5XG4gICAgICApfWA7XG4gICAgICBjb25zdCBub2RlID0gYXdhaXQgZ2V0SFRNTCh1cmwpO1xuICAgICAgaWYgKCFub2RlKSByZXR1cm4gW107XG5cbiAgICAgIGNvbnN0IHJhd0RhdGEgPSBub2RlLmdldEVsZW1lbnRCeUlkKCdzZXJpYWxpemVkLXNlcnZlci1kYXRhJyk7XG4gICAgICBpZiAoIXJhd0RhdGEpIHJldHVybiBbXTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmF3RGF0YS5pbm5lclRleHQpWzBdLmRhdGEuc2VjdGlvbnM7XG4gICAgICBjb25zdCB0cmFja3MgPSBkYXRhLmZpbmQoKHM6IGFueSkgPT4gcy5pdGVtS2luZCA9PT0gJ3RyYWNrTG9ja3VwJyk/Lml0ZW1zO1xuICAgICAgaWYgKCF0cmFja3MpIHJldHVybiBbXTtcblxuICAgICAgcmV0dXJuIHRyYWNrcy5tYXAoKHRyYWNrOiBhbnkpID0+ICh7XG4gICAgICAgIGlkOiB0cmFjay5jb250ZW50RGVzY3JpcHRvci5pZGVudGlmaWVycy5zdG9yZUFkYW1JRCxcbiAgICAgICAgZHVyYXRpb246IHRyYWNrLmR1cmF0aW9uIHx8ICcwOjAwJyxcbiAgICAgICAgdGl0bGU6IHRyYWNrLnRpdGxlLFxuICAgICAgICB1cmw6IHRyYWNrLmNvbnRlbnREZXNjcmlwdG9yLnVybCxcbiAgICAgICAgdGh1bWJuYWlsOiB0cmFjaz8uYXJ0d29yaz8uZGljdGlvbmFyeSA/XG4gICAgICAgIG1ha2VJbWFnZSh7XG4gICAgICAgICAgdXJsOiB0cmFjay5hcnR3b3JrLmRpY3Rpb25hcnkudXJsLFxuICAgICAgICAgIGhlaWdodDogdHJhY2suYXJ0d29yay5kaWN0aW9uYXJ5LmhlaWdodCxcbiAgICAgICAgICB3aWR0aDogdHJhY2suYXJ0d29yay5kaWN0aW9uYXJ5LndpZHRoXG4gICAgICAgIH0pIDpcbiAgICAgICAgJ2h0dHBzOi8vbXVzaWMuYXBwbGUuY29tL2Fzc2V0cy9mYXZpY29uL2Zhdmljb24tMTgwLnBuZycsXG4gICAgICAgIGFydGlzdDoge1xuICAgICAgICAgIG5hbWU6IHRyYWNrLnN1YnRpdGxlTGlua3M/LlswXT8udGl0bGUgPz8gJ1Vua25vd24gQXJ0aXN0J1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBhc3luYyBnZXRTb25nSW5mb0ZhbGxiYWNrKFxuICByZXM6IEhUTUxFbGVtZW50LFxuICBuYW1lOiBzdHJpbmcsXG4gIGlkOiBzdHJpbmcsXG4gIGxpbms6IHN0cmluZylcbiAge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtZXRhVGFncyA9IHJlcy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWV0YScpO1xuICAgICAgaWYgKCFtZXRhVGFncy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICBjb25zdCB0aXRsZSA9XG4gICAgICBtZXRhVGFncy5cbiAgICAgIGZpbmQoKHIpID0+IHIuZ2V0QXR0cmlidXRlKCduYW1lJykgPT09ICdhcHBsZTp0aXRsZScpPy5cbiAgICAgIGdldEF0dHJpYnV0ZSgnY29udGVudCcpIHx8XG4gICAgICByZXMucXVlcnlTZWxlY3RvcigndGl0bGUnKT8uaW5uZXJUZXh0IHx8XG4gICAgICBuYW1lO1xuICAgICAgY29uc3QgY29udGVudElkID1cbiAgICAgIG1ldGFUYWdzLlxuICAgICAgZmluZCgocikgPT4gci5nZXRBdHRyaWJ1dGUoJ25hbWUnKSA9PT0gJ2FwcGxlOmNvbnRlbnRfaWQnKT8uXG4gICAgICBnZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSB8fCBpZDtcbiAgICAgIGNvbnN0IGR1cmF0aW9uUmF3ID0gbWV0YVRhZ3MuXG4gICAgICBmaW5kKChyKSA9PiByLmdldEF0dHJpYnV0ZSgncHJvcGVydHknKSA9PT0gJ211c2ljOnNvbmc6ZHVyYXRpb24nKT8uXG4gICAgICBnZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKTtcblxuICAgICAgY29uc3Qgc29uZyA9IHtcbiAgICAgICAgaWQ6IGNvbnRlbnRJZCxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uUmF3ID9cbiAgICAgICAgcGFyc2VEdXJhdGlvbihkdXJhdGlvblJhdykgOlxuICAgICAgICBtZXRhVGFncy5cbiAgICAgICAgZmluZCgobSkgPT4gbS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSA9PT0gJ2FwcGxlOmRlc2NyaXB0aW9uJyk/LlxuICAgICAgICB0ZXh0Q29udGVudC5zcGxpdCgnRHVyYXRpb246ICcpPy5bMV0uXG4gICAgICAgIHNwbGl0KCdcIicpPy5bMF0gfHwgJzA6MDAnLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgdXJsOiBsaW5rLFxuICAgICAgICB0aHVtYm5haWw6XG4gICAgICAgIG1ldGFUYWdzLlxuICAgICAgICBmaW5kKChyKSA9PlxuICAgICAgICBbJ29nOmltYWdlOnNlY3VyZV91cmwnLCAnb2c6aW1hZ2UnXS5pbmNsdWRlcyhcbiAgICAgICAgICByLmdldEF0dHJpYnV0ZSgncHJvcGVydHknKSFcbiAgICAgICAgKVxuICAgICAgICApPy5cbiAgICAgICAgZ2V0QXR0cmlidXRlKCdjb250ZW50JykgfHxcbiAgICAgICAgJ2h0dHBzOi8vbXVzaWMuYXBwbGUuY29tL2Fzc2V0cy9mYXZpY29uL2Zhdmljb24tMTgwLnBuZycsXG4gICAgICAgIGFydGlzdDoge1xuICAgICAgICAgIG5hbWU6XG4gICAgICAgICAgcmVzLlxuICAgICAgICAgIHF1ZXJ5U2VsZWN0b3IoJy5zb25nLXN1YnRpdGxlc19fYXJ0aXN0cz5hJyk/LlxuICAgICAgICAgIHRleHRDb250ZW50Py50cmltKCkgfHwgJ0FwcGxlIE11c2ljJ1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gc29uZztcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0U29uZ0luZm8obGluazogc3RyaW5nKSB7XG4gICAgaWYgKCFRdWVyeVJlc29sdmVyLnJlZ2V4LmFwcGxlTXVzaWNTb25nUmVnZXgudGVzdChsaW5rKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChsaW5rKTtcbiAgICBjb25zdCBpZCA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdpJyk7XG4gICAgY29uc3QgbmFtZSA9IHVybC5wYXRobmFtZS5zcGxpdCgnYWxidW0vJylbMV0/LnNwbGl0KCcvJylbMF07XG5cbiAgICBpZiAoIWlkIHx8ICFuYW1lKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldEhUTUwoYGh0dHBzOi8vbXVzaWMuYXBwbGUuY29tL3VzL3NvbmcvJHtuYW1lfS8ke2lkfWApO1xuICAgIGlmICghcmVzKSByZXR1cm4gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhc3JjID1cbiAgICAgIHJlcy5nZXRFbGVtZW50QnlJZCgnc2VyaWFsaXplZC1zZXJ2ZXItZGF0YScpPy5pbm5lclRleHQgfHxcbiAgICAgIHJlcy5pbm5lclRleHQuXG4gICAgICBzcGxpdChcbiAgICAgICAgJzxzY3JpcHQgdHlwZT1cImFwcGxpY2F0aW9uL2pzb25cIiBpZD1cInNlcmlhbGl6ZWQtc2VydmVyLWRhdGFcIj4nXG4gICAgICApPy5bMV0/LlxuICAgICAgc3BsaXQoJzwvc2NyaXB0PicpPy5bMF07XG4gICAgICBpZiAoIWRhdGFzcmMpIHRocm93ICdub3QgZm91bmQnO1xuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoZGF0YXNyYylbMF0uZGF0YS5zZW9EYXRhO1xuICAgICAgY29uc3Qgc29uZyA9IGRhdGEub2dTb25nc1swXT8uYXR0cmlidXRlcztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGRhdGEub2dTb25nc1swXT8uaWQgfHwgZGF0YS5hcHBsZUNvbnRlbnRJZCB8fCBpZCxcbiAgICAgICAgZHVyYXRpb246IHNvbmc/LmR1cmF0aW9uSW5NaWxsaXMgfHwgJzA6MDAnLFxuICAgICAgICB0aXRsZTogc29uZz8ubmFtZSB8fCBkYXRhLmFwcGxlVGl0bGUsXG4gICAgICAgIHVybDogc29uZz8udXJsIHx8IGRhdGEudXJsIHx8IGxpbmssXG4gICAgICAgIHRodW1ibmFpbDogc29uZz8uYXJ0d29yayA/XG4gICAgICAgIG1ha2VJbWFnZSh7XG4gICAgICAgICAgdXJsOiBzb25nLmFydHdvcmsudXJsLFxuICAgICAgICAgIGhlaWdodDogc29uZy5hcnR3b3JrLmhlaWdodCxcbiAgICAgICAgICB3aWR0aDogc29uZy5hcnR3b3JrLndpZHRoXG4gICAgICAgIH0pIDpcbiAgICAgICAgZGF0YS5hcnR3b3JrVXJsID9cbiAgICAgICAgbWFrZUltYWdlKHtcbiAgICAgICAgICBoZWlnaHQ6IGRhdGEuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoOiBkYXRhLndpZHRoLFxuICAgICAgICAgIHVybDogZGF0YS5hcnR3b3JrVXJsLFxuICAgICAgICAgIGV4dDogZGF0YS5maWxlVHlwZSB8fCAnanBnJ1xuICAgICAgICB9KSA6XG4gICAgICAgICdodHRwczovL211c2ljLmFwcGxlLmNvbS9hc3NldHMvZmF2aWNvbi9mYXZpY29uLTE4MC5wbmcnLFxuICAgICAgICBhcnRpc3Q6IHtcbiAgICAgICAgICBuYW1lOiBzb25nPy5hcnRpc3ROYW1lIHx8IGRhdGEuc29jaWFsVGl0bGUgfHwgJ0FwcGxlIE11c2ljJ1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U29uZ0luZm9GYWxsYmFjayhyZXMsIG5hbWUsIGlkLCBsaW5rKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFzeW5jIGdldFBsYXlsaXN0SW5mbyhsaW5rOiBzdHJpbmcpIHtcbiAgICBpZiAoIVF1ZXJ5UmVzb2x2ZXIucmVnZXguYXBwbGVNdXNpY1BsYXlsaXN0UmVnZXgudGVzdChsaW5rKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZ2V0SFRNTChsaW5rKTtcbiAgICBpZiAoIXJlcykgcmV0dXJuIG51bGw7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YXNyYyA9XG4gICAgICByZXMuZ2V0RWxlbWVudEJ5SWQoJ3NlcmlhbGl6ZWQtc2VydmVyLWRhdGEnKT8uaW5uZXJUZXh0IHx8XG4gICAgICByZXMuaW5uZXJUZXh0LlxuICAgICAgc3BsaXQoXG4gICAgICAgICc8c2NyaXB0IHR5cGU9XCJhcHBsaWNhdGlvbi9qc29uXCIgaWQ9XCJzZXJpYWxpemVkLXNlcnZlci1kYXRhXCI+J1xuICAgICAgKT8uWzFdPy5cbiAgICAgIHNwbGl0KCc8L3NjcmlwdD4nKT8uWzBdO1xuICAgICAgaWYgKCFkYXRhc3JjKSB0aHJvdyAnbm90IGZvdW5kJztcbiAgICAgIGNvbnN0IHBsID0gSlNPTi5wYXJzZShkYXRhc3JjKVswXS5kYXRhLnNlb0RhdGE7XG4gICAgICBjb25zdCB0aHVtYm5haWwgPSBwbC5hcnR3b3JrVXJsID9cbiAgICAgIG1ha2VJbWFnZSh7XG4gICAgICAgIGhlaWdodDogcGwuaGVpZ2h0LFxuICAgICAgICB3aWR0aDogcGwud2lkdGgsXG4gICAgICAgIHVybDogcGwuYXJ0d29ya1VybCxcbiAgICAgICAgZXh0OiBwbC5maWxlVHlwZSB8fCAnanBnJ1xuICAgICAgfSkgOlxuICAgICAgJ2h0dHBzOi8vbXVzaWMuYXBwbGUuY29tL2Fzc2V0cy9mYXZpY29uL2Zhdmljb24tMTgwLnBuZyc7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogcGwuYXBwbGVDb250ZW50SWQsXG4gICAgICAgIHRpdGxlOiBwbC5hcHBsZVRpdGxlLFxuICAgICAgICB0aHVtYm5haWwsXG4gICAgICAgIGFydGlzdDoge1xuICAgICAgICAgIG5hbWU6IHBsLm9nU29uZ3M/LlswXT8uYXR0cmlidXRlcz8uYXJ0aXN0TmFtZSB8fCAnQXBwbGUgTXVzaWMnXG4gICAgICAgIH0sXG4gICAgICAgIHVybDogcGwudXJsLFxuICAgICAgICB0cmFja3M6XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBwbC5vZ1NvbmdzPy5tYXAoKG06IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNvbmcgPSBtLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBtLmlkLFxuICAgICAgICAgICAgZHVyYXRpb246IHNvbmcuZHVyYXRpb25Jbk1pbGxpcyB8fCAnMDowMCcsXG4gICAgICAgICAgICB0aXRsZTogc29uZy5uYW1lLFxuICAgICAgICAgICAgdXJsOiBzb25nLnVybCxcbiAgICAgICAgICAgIHRodW1ibmFpbDogc29uZy5hcnR3b3JrID9cbiAgICAgICAgICAgIG1ha2VJbWFnZSh7XG4gICAgICAgICAgICAgIHVybDogc29uZy5hcnR3b3JrLnVybCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBzb25nLmFydHdvcmsuaGVpZ2h0LFxuICAgICAgICAgICAgICB3aWR0aDogc29uZy5hcnR3b3JrLndpZHRoXG4gICAgICAgICAgICB9KSA6XG4gICAgICAgICAgICB0aHVtYm5haWwsXG4gICAgICAgICAgICBhcnRpc3Q6IHtcbiAgICAgICAgICAgICAgbmFtZTogc29uZy5hcnRpc3ROYW1lIHx8ICdBcHBsZSBNdXNpYydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KSB8fCBbXVxuICAgICAgfTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0QWxidW1JbmZvKGxpbms6IHN0cmluZykge1xuICAgIGlmICghUXVlcnlSZXNvbHZlci5yZWdleC5hcHBsZU11c2ljQWxidW1SZWdleC50ZXN0KGxpbmspKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRIVE1MKGxpbmspO1xuICAgIGlmICghcmVzKSByZXR1cm4gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhc3JjID1cbiAgICAgIHJlcy5nZXRFbGVtZW50QnlJZCgnc2VyaWFsaXplZC1zZXJ2ZXItZGF0YScpPy5pbm5lclRleHQgfHxcbiAgICAgIHJlcy5pbm5lclRleHQuXG4gICAgICBzcGxpdChcbiAgICAgICAgJzxzY3JpcHQgdHlwZT1cImFwcGxpY2F0aW9uL2pzb25cIiBpZD1cInNlcmlhbGl6ZWQtc2VydmVyLWRhdGFcIj4nXG4gICAgICApPy5bMV0/LlxuICAgICAgc3BsaXQoJzwvc2NyaXB0PicpPy5bMF07XG4gICAgICBpZiAoIWRhdGFzcmMpIHRocm93ICdub3QgZm91bmQnO1xuICAgICAgY29uc3QgcGwgPSBKU09OLnBhcnNlKGRhdGFzcmMpWzBdLmRhdGEuc2VvRGF0YTtcbiAgICAgIGNvbnN0IHRodW1ibmFpbCA9IHBsLmFydHdvcmtVcmwgP1xuICAgICAgbWFrZUltYWdlKHtcbiAgICAgICAgaGVpZ2h0OiBwbC5oZWlnaHQsXG4gICAgICAgIHdpZHRoOiBwbC53aWR0aCxcbiAgICAgICAgdXJsOiBwbC5hcnR3b3JrVXJsLFxuICAgICAgICBleHQ6IHBsLmZpbGVUeXBlIHx8ICdqcGcnXG4gICAgICB9KSA6XG4gICAgICAnaHR0cHM6Ly9tdXNpYy5hcHBsZS5jb20vYXNzZXRzL2Zhdmljb24vZmF2aWNvbi0xODAucG5nJztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBwbC5hcHBsZUNvbnRlbnRJZCxcbiAgICAgICAgdGl0bGU6IHBsLmFwcGxlVGl0bGUsXG4gICAgICAgIHRodW1ibmFpbCxcbiAgICAgICAgYXJ0aXN0OiB7XG4gICAgICAgICAgbmFtZTogcGwub2dTb25ncz8uWzBdPy5hdHRyaWJ1dGVzPy5hcnRpc3ROYW1lIHx8ICdBcHBsZSBNdXNpYydcbiAgICAgICAgfSxcbiAgICAgICAgdXJsOiBwbC51cmwsXG4gICAgICAgIHRyYWNrczpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHBsLm9nU29uZ3M/Lm1hcCgobTogYW55KSA9PiB7XG4gICAgICAgICAgY29uc3Qgc29uZyA9IG0uYXR0cmlidXRlcztcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IG0uaWQsXG4gICAgICAgICAgICBkdXJhdGlvbjogc29uZy5kdXJhdGlvbkluTWlsbGlzIHx8ICcwOjAwJyxcbiAgICAgICAgICAgIHRpdGxlOiBzb25nLm5hbWUsXG4gICAgICAgICAgICB1cmw6IHNvbmcudXJsLFxuICAgICAgICAgICAgdGh1bWJuYWlsOiBzb25nLmFydHdvcmsgP1xuICAgICAgICAgICAgbWFrZUltYWdlKHtcbiAgICAgICAgICAgICAgdXJsOiBzb25nLmFydHdvcmsudXJsLFxuICAgICAgICAgICAgICBoZWlnaHQ6IHNvbmcuYXJ0d29yay5oZWlnaHQsXG4gICAgICAgICAgICAgIHdpZHRoOiBzb25nLmFydHdvcmsud2lkdGhcbiAgICAgICAgICAgIH0pIDpcbiAgICAgICAgICAgIHRodW1ibmFpbCxcbiAgICAgICAgICAgIGFydGlzdDoge1xuICAgICAgICAgICAgICBuYW1lOiBzb25nLmFydGlzdE5hbWUgfHwgJ0FwcGxlIE11c2ljJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0pIHx8IFtdXG4gICAgICB9O1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59IiwgImltcG9ydCB7IGZldGNoLCBVQSB9IGZyb20gJy4vaGVscGVyJztcblxuY29uc3QgU1BfQU5PTl9UT0tFTl9VUkwgPVxuJ2h0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9nZXRfYWNjZXNzX3Rva2VuP3JlYXNvbj10cmFuc3BvcnQmcHJvZHVjdFR5cGU9ZW1iZWQnO1xuY29uc3QgU1BfQUNDRVNTX1RPS0VOX1VSTCA9XG4naHR0cHM6Ly9hY2NvdW50cy5zcG90aWZ5LmNvbS9hcGkvdG9rZW4/Z3JhbnRfdHlwZT1jbGllbnRfY3JlZGVudGlhbHMnO1xuY29uc3QgU1BfQkFTRSA9ICdodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MSc7XG5cbmludGVyZmFjZSBTUF9BQ0NFU1NfVE9LRU4ge1xuICB0b2tlbjogc3RyaW5nO1xuICBleHBpcmVzQWZ0ZXI6IG51bWJlcjtcbiAgdHlwZTogJ0JlYXJlcic7XG59XG5cbmV4cG9ydCBjbGFzcyBTcG90aWZ5QVBJIHtcbiAgcHVibGljIGFjY2Vzc1Rva2VuOiBTUF9BQ0NFU1NfVE9LRU4gfCBudWxsID0gbnVsbDtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gIHB1YmxpYyBjcmVkZW50aWFsczoge1xuICAgIGNsaWVudElkOiBzdHJpbmcgfCBudWxsO1xuICAgIGNsaWVudFNlY3JldDogc3RyaW5nIHwgbnVsbDtcbiAgfSA9IHtcbiAgICBjbGllbnRJZDogbnVsbCxcbiAgICBjbGllbnRTZWNyZXQ6IG51bGxcbiAgfSlcbiAge31cblxuICBwdWJsaWMgZ2V0IGF1dGhvcml6YXRpb25LZXkoKSB7XG4gICAgaWYgKCF0aGlzLmNyZWRlbnRpYWxzLmNsaWVudElkIHx8ICF0aGlzLmNyZWRlbnRpYWxzLmNsaWVudFNlY3JldClcbiAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICBgJHt0aGlzLmNyZWRlbnRpYWxzLmNsaWVudElkfToke3RoaXMuY3JlZGVudGlhbHMuY2xpZW50U2VjcmV0fWBcbiAgICApLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZXF1ZXN0VG9rZW4oKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5hdXRob3JpemF0aW9uS2V5O1xuXG4gICAgaWYgKCFrZXkpIHJldHVybiBhd2FpdCB0aGlzLnJlcXVlc3RBbm9ueW1vdXNUb2tlbigpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFNQX0FDQ0VTU19UT0tFTl9VUkwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnVXNlci1BZ2VudCc6IFVBLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCYXNpYyAke2tleX1gLFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICBpZiAoIWJvZHkuYWNjZXNzX3Rva2VuKSB0aHJvdyAnbm8gdG9rZW4nO1xuXG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICB0b2tlbjogYm9keS5hY2Nlc3NfdG9rZW4gYXMgc3RyaW5nLFxuICAgICAgICBleHBpcmVzQWZ0ZXI6IGJvZHkuZXhwaXJlc19pbiBhcyBudW1iZXIsXG4gICAgICAgIHR5cGU6ICdCZWFyZXInIGFzIGNvbnN0XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlbiA9IGRhdGE7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZXF1ZXN0QW5vbnltb3VzVG9rZW4oKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVxdWVzdEFub255bW91c1Rva2VuKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChTUF9BTk9OX1RPS0VOX1VSTCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ1VzZXItQWdlbnQnOiBVQSxcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXJlcy5vaykgdGhyb3cgJ25vdF9vayc7XG5cbiAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICBpZiAoIWJvZHkuYWNjZXNzVG9rZW4pIHRocm93ICdub19hY2Nlc3NfdG9rZW4nO1xuXG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICB0b2tlbjogYm9keS5hY2Nlc3NUb2tlbiBhcyBzdHJpbmcsXG4gICAgICAgIGV4cGlyZXNBZnRlcjogYm9keS5hY2Nlc3NUb2tlbkV4cGlyYXRpb25UaW1lc3RhbXBNcyBhcyBudW1iZXIsXG4gICAgICAgIHR5cGU6ICdCZWFyZXInIGFzIGNvbnN0XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlbiA9IGRhdGE7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaXNUb2tlbkV4cGlyZWQoKSB7XG4gICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gRGF0ZS5ub3coKSA+IHRoaXMuYWNjZXNzVG9rZW4uZXhwaXJlc0FmdGVyO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNlYXJjaChxdWVyeTogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIHJlcVxuICAgICAgaWYgKHRoaXMuaXNUb2tlbkV4cGlyZWQoKSkgYXdhaXQgdGhpcy5yZXF1ZXN0VG9rZW4oKTtcbiAgICAgIC8vIGZhaWxlZFxuICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuKSByZXR1cm4gbnVsbDtcblxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXG4gICAgICAgIGAke1NQX0JBU0V9L3NlYXJjaC8/cT0ke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICBxdWVyeVxuICAgICAgICApfSZ0eXBlPXRyYWNrJm1hcmtldD1VU2AsXG4gICAgICAgIHtcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXNlci1BZ2VudCc6IFVBLFxuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7dGhpcy5hY2Nlc3NUb2tlbi50eXBlfSAke3RoaXMuYWNjZXNzVG9rZW4udG9rZW59YCxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGlmICghcmVzLm9rKSByZXR1cm4gbnVsbDtcblxuICAgICAgY29uc3QgZGF0YToge3RyYWNrczoge2l0ZW1zOiBTcG90aWZ5VHJhY2tbXTt9O30gPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICByZXR1cm4gZGF0YS50cmFja3MuaXRlbXMubWFwKChtKSA9PiAoe1xuICAgICAgICB0aXRsZTogbS5uYW1lLFxuICAgICAgICBkdXJhdGlvbjogbS5kdXJhdGlvbl9tcyxcbiAgICAgICAgYXJ0aXN0OiBtLmFydGlzdHMubWFwKChtKSA9PiBtLm5hbWUpLmpvaW4oJywgJyksXG4gICAgICAgIHVybDpcbiAgICAgICAgbS5leHRlcm5hbF91cmxzPy5zcG90aWZ5IHx8IGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vdHJhY2svJHttLmlkfWAsXG4gICAgICAgIHRodW1ibmFpbDogbS5hbGJ1bS5pbWFnZXM/LlswXT8udXJsIHx8IG51bGxcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRQbGF5bGlzdChpZDogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIHJlcVxuICAgICAgaWYgKHRoaXMuaXNUb2tlbkV4cGlyZWQoKSkgYXdhaXQgdGhpcy5yZXF1ZXN0VG9rZW4oKTtcbiAgICAgIC8vIGZhaWxlZFxuICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuKSByZXR1cm4gbnVsbDtcblxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7U1BfQkFTRX0vcGxheWxpc3RzLyR7aWR9P21hcmtldD1VU2AsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdVc2VyLUFnZW50JzogVUEsXG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7dGhpcy5hY2Nlc3NUb2tlbi50eXBlfSAke3RoaXMuYWNjZXNzVG9rZW4udG9rZW59YCxcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFyZXMub2spIHJldHVybiBudWxsO1xuXG4gICAgICBjb25zdCBkYXRhOiB7XG4gICAgICAgIGV4dGVybmFsX3VybHM6IHtzcG90aWZ5OiBzdHJpbmc7fTtcbiAgICAgICAgb3duZXI6IHtkaXNwbGF5X25hbWU6IHN0cmluZzt9O1xuICAgICAgICBpZDogc3RyaW5nO1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIGltYWdlczoge3VybDogc3RyaW5nO31bXTtcbiAgICAgICAgdHJhY2tzOiB7XG4gICAgICAgICAgaXRlbXM6IHt0cmFjazogU3BvdGlmeVRyYWNrO31bXTtcbiAgICAgICAgICBuZXh0Pzogc3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgfSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICAgIGlmICghZGF0YS50cmFja3MuaXRlbXMubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgY29uc3QgdDoge3RyYWNrOiBTcG90aWZ5VHJhY2s7fVtdID0gZGF0YS50cmFja3MuaXRlbXM7XG5cbiAgICAgIGxldCBuZXh0OiBzdHJpbmcgfCB1bmRlZmluZWQgPSBkYXRhLnRyYWNrcy5uZXh0O1xuXG4gICAgICB3aGlsZSAodHlwZW9mIG5leHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2gobmV4dCwge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6IFVBLFxuICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgJHt0aGlzLmFjY2Vzc1Rva2VuLnR5cGV9ICR7dGhpcy5hY2Nlc3NUb2tlbi50b2tlbn1gLFxuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCFyZXMub2spIGJyZWFrO1xuICAgICAgICAgIGNvbnN0IG5leHRQYWdlOiB7aXRlbXM6IHt0cmFjazogU3BvdGlmeVRyYWNrO31bXTtuZXh0Pzogc3RyaW5nO30gPVxuICAgICAgICAgIGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICAgICAgICB0LnB1c2goLi4ubmV4dFBhZ2UuaXRlbXMpO1xuICAgICAgICAgIG5leHQgPSBuZXh0UGFnZS5uZXh0O1xuXG4gICAgICAgICAgaWYgKCFuZXh0KSBicmVhaztcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhY2tzID0gdC5tYXAoKHsgdHJhY2s6IG0gfSkgPT4gKHtcbiAgICAgICAgdGl0bGU6IG0ubmFtZSxcbiAgICAgICAgZHVyYXRpb246IG0uZHVyYXRpb25fbXMsXG4gICAgICAgIGFydGlzdDogbS5hcnRpc3RzLm1hcCgobSkgPT4gbS5uYW1lKS5qb2luKCcsICcpLFxuICAgICAgICB1cmw6XG4gICAgICAgIG0uZXh0ZXJuYWxfdXJscz8uc3BvdGlmeSB8fCBgaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3RyYWNrLyR7bS5pZH1gLFxuICAgICAgICB0aHVtYm5haWw6IG0uYWxidW0uaW1hZ2VzPy5bMF0/LnVybCB8fCBudWxsXG4gICAgICB9KSk7XG5cbiAgICAgIGlmICghdHJhY2tzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgIGF1dGhvcjogZGF0YS5vd25lci5kaXNwbGF5X25hbWUsXG4gICAgICAgIHRodW1ibmFpbDogZGF0YS5pbWFnZXM/LlswXT8udXJsIHx8IG51bGwsXG4gICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICB1cmw6XG4gICAgICAgIGRhdGEuZXh0ZXJuYWxfdXJscy5zcG90aWZ5IHx8XG4gICAgICAgIGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vcGxheWxpc3QvJHtpZH1gLFxuICAgICAgICB0cmFja3NcbiAgICAgIH07XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0QWxidW0oaWQ6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICAvLyByZXFcbiAgICAgIGlmICh0aGlzLmlzVG9rZW5FeHBpcmVkKCkpIGF3YWl0IHRoaXMucmVxdWVzdFRva2VuKCk7XG4gICAgICAvLyBmYWlsZWRcbiAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbikgcmV0dXJuIG51bGw7XG5cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke1NQX0JBU0V9L2FsYnVtcy8ke2lkfT9tYXJrZXQ9VVNgLCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnVXNlci1BZ2VudCc6IFVBLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGAke3RoaXMuYWNjZXNzVG9rZW4udHlwZX0gJHt0aGlzLmFjY2Vzc1Rva2VuLnRva2VufWAsXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghcmVzLm9rKSByZXR1cm4gbnVsbDtcblxuICAgICAgY29uc3QgZGF0YToge1xuICAgICAgICBleHRlcm5hbF91cmxzOiB7c3BvdGlmeTogc3RyaW5nO307XG4gICAgICAgIGFydGlzdHM6IHtuYW1lOiBzdHJpbmc7fVtdO1xuICAgICAgICBpZDogc3RyaW5nO1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIGltYWdlczoge3VybDogc3RyaW5nO31bXTtcbiAgICAgICAgdHJhY2tzOiB7XG4gICAgICAgICAgaXRlbXM6IFNwb3RpZnlUcmFja1tdO1xuICAgICAgICAgIG5leHQ/OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICB9ID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgICAgaWYgKCFkYXRhLnRyYWNrcy5pdGVtcy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICBjb25zdCB0OiBTcG90aWZ5VHJhY2tbXSA9IGRhdGEudHJhY2tzLml0ZW1zO1xuXG4gICAgICBsZXQgbmV4dDogc3RyaW5nIHwgdW5kZWZpbmVkID0gZGF0YS50cmFja3MubmV4dDtcblxuICAgICAgd2hpbGUgKHR5cGVvZiBuZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKG5leHQsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBVQSxcbiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7dGhpcy5hY2Nlc3NUb2tlbi50eXBlfSAke3RoaXMuYWNjZXNzVG9rZW4udG9rZW59YCxcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghcmVzLm9rKSBicmVhaztcbiAgICAgICAgICBjb25zdCBuZXh0UGFnZToge2l0ZW1zOiBTcG90aWZ5VHJhY2tbXTtuZXh0Pzogc3RyaW5nO30gPVxuICAgICAgICAgIGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICAgICAgICB0LnB1c2goLi4ubmV4dFBhZ2UuaXRlbXMpO1xuICAgICAgICAgIG5leHQgPSBuZXh0UGFnZS5uZXh0O1xuXG4gICAgICAgICAgaWYgKCFuZXh0KSBicmVhaztcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhY2tzID0gdC5tYXAoKG0pID0+ICh7XG4gICAgICAgIHRpdGxlOiBtLm5hbWUsXG4gICAgICAgIGR1cmF0aW9uOiBtLmR1cmF0aW9uX21zLFxuICAgICAgICBhcnRpc3Q6IG0uYXJ0aXN0cy5tYXAoKG0pID0+IG0ubmFtZSkuam9pbignLCAnKSxcbiAgICAgICAgdXJsOlxuICAgICAgICBtLmV4dGVybmFsX3VybHM/LnNwb3RpZnkgfHwgYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS90cmFjay8ke20uaWR9YCxcbiAgICAgICAgdGh1bWJuYWlsOiBkYXRhLmltYWdlcz8uWzBdPy51cmwgfHwgbnVsbFxuICAgICAgfSkpO1xuXG4gICAgICBpZiAoIXRyYWNrcy5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgICBhdXRob3I6IGRhdGEuYXJ0aXN0cy5tYXAoKG0pID0+IG0ubmFtZSkuam9pbignLCAnKSxcbiAgICAgICAgdGh1bWJuYWlsOiBkYXRhLmltYWdlcz8uWzBdPy51cmwgfHwgbnVsbCxcbiAgICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICAgIHVybDpcbiAgICAgICAgZGF0YS5leHRlcm5hbF91cmxzLnNwb3RpZnkgfHwgYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9hbGJ1bS8ke2lkfWAsXG4gICAgICAgIHRyYWNrc1xuICAgICAgfTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RpZnlUcmFjayB7XG4gIGFsYnVtOiB7XG4gICAgaW1hZ2VzOiB7XG4gICAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICAgIHVybDogc3RyaW5nO1xuICAgICAgd2lkdGg6IG51bWJlcjtcbiAgICB9W107XG4gIH07XG4gIGFydGlzdHM6IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgfVtdO1xuICBkdXJhdGlvbl9tczogbnVtYmVyO1xuICBleHBsaWNpdDogYm9vbGVhbjtcbiAgZXh0ZXJuYWxfdXJsczoge3Nwb3RpZnk6IHN0cmluZzt9O1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG59IiwgImltcG9ydCB7XG4gIEJhc2VFeHRyYWN0b3IsXG4gIEV4dHJhY3RvckluZm8sXG4gIEV4dHJhY3RvclNlYXJjaENvbnRleHQsXG4gIEV4dHJhY3RvclN0cmVhbWFibGUsXG4gIFBsYXlsaXN0LFxuICBRdWVyeVR5cGUsXG4gIFNlYXJjaFF1ZXJ5VHlwZSxcbiAgVHJhY2ssXG4gIFV0aWwgfSBmcm9tXG4nZGlzY29yZC1wbGF5ZXInO1xuaW1wb3J0IHR5cGUgeyBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBmZXRjaCB9IGZyb20gJy4uL2ludGVybmFsL2hlbHBlcic7XG5pbXBvcnQgc3BvdGlmeSwge1xuICBTcG90aWZ5LFxuICBTcG90aWZ5QWxidW0sXG4gIFNwb3RpZnlQbGF5bGlzdCxcbiAgU3BvdGlmeVNvbmcgfSBmcm9tXG4nc3BvdGlmeS11cmwtaW5mbyc7XG5pbXBvcnQgeyBTcG90aWZ5QVBJIH0gZnJvbSAnLi4vaW50ZXJuYWwnO1xuaW1wb3J0IHsgU3RyZWFtRk4gfSBmcm9tICcuLi90eXBlcy9jb21tb24nO1xuXG5jb25zdCByZSA9XG4vXig/Omh0dHBzOlxcL1xcL29wZW5cXC5zcG90aWZ5XFwuY29tXFwvKGludGwtKFthLXpdfFtBLVpdKXswLDN9XFwvKT8oPzp1c2VyXFwvW0EtWmEtejAtOV0rXFwvKT98c3BvdGlmeTopKGFsYnVtfHBsYXlsaXN0fHRyYWNrKSg/OlsvOl0pKFtBLVphLXowLTldKykuKiQvO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RpZnlFeHRyYWN0b3JJbml0IHtcbiAgY2xpZW50SWQ/OiBzdHJpbmcgfCBudWxsO1xuICBjbGllbnRTZWNyZXQ/OiBzdHJpbmcgfCBudWxsO1xuICBjcmVhdGVTdHJlYW0/OiAoXG4gIGV4dDogU3BvdGlmeUV4dHJhY3RvcixcbiAgdXJsOiBzdHJpbmcpXG4gID0+IFByb21pc2U8UmVhZGFibGUgfCBzdHJpbmc+O1xufVxuXG5leHBvcnQgY2xhc3MgU3BvdGlmeUV4dHJhY3RvciBleHRlbmRzIEJhc2VFeHRyYWN0b3I8U3BvdGlmeUV4dHJhY3RvckluaXQ+IHtcbiAgcHVibGljIHN0YXRpYyBpZGVudGlmaWVyID0gJ2NvbS5kaXNjb3JkLXBsYXllci5zcG90aWZ5ZXh0cmFjdG9yJyBhcyBjb25zdDtcbiAgcHJpdmF0ZSBfc3RyZWFtITogU3RyZWFtRk47XG4gIHByaXZhdGUgX2xpYiE6IFNwb3RpZnk7XG4gIHByaXZhdGUgX2NyZWRlbnRpYWxzID0ge1xuICAgIGNsaWVudElkOiB0aGlzLm9wdGlvbnMuY2xpZW50SWQgfHwgcHJvY2Vzcy5lbnYuRFBfU1BPVElGWV9DTElFTlRfSUQgfHwgbnVsbCxcbiAgICBjbGllbnRTZWNyZXQ6XG4gICAgdGhpcy5vcHRpb25zLmNsaWVudFNlY3JldCB8fCBwcm9jZXNzLmVudi5EUF9TUE9USUZZX0NMSUVOVF9TRUNSRVQgfHwgbnVsbFxuICB9O1xuICBwdWJsaWMgaW50ZXJuYWwgPSBuZXcgU3BvdGlmeUFQSSh0aGlzLl9jcmVkZW50aWFscyk7XG5cbiAgcHVibGljIGFzeW5jIGFjdGl2YXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMucHJvdG9jb2xzID0gWydzcHNlYXJjaCcsICdzcG90aWZ5J107XG4gICAgdGhpcy5fbGliID0gc3BvdGlmeShmZXRjaCk7XG4gICAgaWYgKHRoaXMuaW50ZXJuYWwuaXNUb2tlbkV4cGlyZWQoKSkgYXdhaXQgdGhpcy5pbnRlcm5hbC5yZXF1ZXN0VG9rZW4oKTtcblxuICAgIGNvbnN0IGZuID0gdGhpcy5vcHRpb25zLmNyZWF0ZVN0cmVhbTtcbiAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9zdHJlYW0gPSAocTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiBmbih0aGlzLCBxKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5fc3RyZWFtID0gdW5kZWZpbmVkIGFzIHVua25vd24gYXMgU3RyZWFtRk47XG4gICAgdGhpcy5fbGliID0gdW5kZWZpbmVkIGFzIHVua25vd24gYXMgU3BvdGlmeTtcbiAgICB0aGlzLnByb3RvY29scyA9IFtdO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHZhbGlkYXRlKFxuICBxdWVyeTogc3RyaW5nLFxuICB0eXBlPzogU2VhcmNoUXVlcnlUeXBlIHwgbnVsbCB8IHVuZGVmaW5lZClcbiAgOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICByZXR1cm4gKDxTZWFyY2hRdWVyeVR5cGVbXT4gW1xuICAgIFF1ZXJ5VHlwZS5TUE9USUZZX0FMQlVNLFxuICAgIFF1ZXJ5VHlwZS5TUE9USUZZX1BMQVlMSVNULFxuICAgIFF1ZXJ5VHlwZS5TUE9USUZZX1NPTkcsXG4gICAgUXVlcnlUeXBlLlNQT1RJRllfU0VBUkNILFxuICAgIFF1ZXJ5VHlwZS5BVVRPLFxuICAgIFF1ZXJ5VHlwZS5BVVRPX1NFQVJDSF0pLlxuICAgIHNvbWUoKHQpID0+IHQgPT09IHR5cGUpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFJlbGF0ZWRUcmFja3ModHJhY2s6IFRyYWNrKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlKHRyYWNrLmF1dGhvciB8fCB0cmFjay50aXRsZSwge1xuICAgICAgdHlwZTogUXVlcnlUeXBlLlNQT1RJRllfU0VBUkNILFxuICAgICAgcmVxdWVzdGVkQnk6IHRyYWNrLnJlcXVlc3RlZEJ5XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaGFuZGxlKFxuICBxdWVyeTogc3RyaW5nLFxuICBjb250ZXh0OiBFeHRyYWN0b3JTZWFyY2hDb250ZXh0KVxuICA6IFByb21pc2U8RXh0cmFjdG9ySW5mbz4ge1xuICAgIGlmIChjb250ZXh0LnByb3RvY29sID09PSAnc3BzZWFyY2gnKVxuICAgIGNvbnRleHQudHlwZSA9IFF1ZXJ5VHlwZS5TUE9USUZZX1NFQVJDSDtcbiAgICBzd2l0Y2ggKGNvbnRleHQudHlwZSkge1xuICAgICAgY2FzZSBRdWVyeVR5cGUuQVVUTzpcbiAgICAgIGNhc2UgUXVlcnlUeXBlLkFVVE9fU0VBUkNIOlxuICAgICAgY2FzZSBRdWVyeVR5cGUuU1BPVElGWV9TRUFSQ0g6e1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmludGVybmFsLnNlYXJjaChxdWVyeSk7XG4gICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgZGF0YS5tYXAoKHNwb3RpZnlEYXRhKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHRyYWNrOiBUcmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IHNwb3RpZnlEYXRhLnRpdGxlLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgJHtzcG90aWZ5RGF0YS50aXRsZX0gYnkgJHtzcG90aWZ5RGF0YS5hcnRpc3R9YCxcbiAgICAgICAgICAgICAgICBhdXRob3I6IHNwb3RpZnlEYXRhLmFydGlzdCA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgIHVybDogc3BvdGlmeURhdGEudXJsLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDpcbiAgICAgICAgICAgICAgICBzcG90aWZ5RGF0YS50aHVtYm5haWwgfHxcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuc2Nkbi5jby9pL19nbG9iYWwvdHdpdHRlcl9jYXJkLWRlZmF1bHQuanBnJyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFxuICAgICAgICAgICAgICAgICAgVXRpbC5wYXJzZU1TKHNwb3RpZnlEYXRhLmR1cmF0aW9uID8/IDApXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICBzb3VyY2U6ICdzcG90aWZ5JyxcbiAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IFF1ZXJ5VHlwZS5TUE9USUZZX1NPTkcsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgIHNvdXJjZTogc3BvdGlmeURhdGEsXG4gICAgICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzcG90aWZ5RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICByZXR1cm4gdHJhY2s7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgUXVlcnlUeXBlLlNQT1RJRllfU09ORzp7XG4gICAgICAgICAgY29uc3Qgc3BvdGlmeURhdGE6IFNwb3RpZnlTb25nIHwgdm9pZCA9IGF3YWl0IHRoaXMuX2xpYi5cbiAgICAgICAgICBnZXREYXRhKHF1ZXJ5LCBjb250ZXh0LnJlcXVlc3RPcHRpb25zIGFzIHVua25vd24gYXMgUmVxdWVzdEluaXQpLlxuICAgICAgICAgIGNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgICAgaWYgKCFzcG90aWZ5RGF0YSkgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW10gfTtcbiAgICAgICAgICBjb25zdCBzcG90aWZ5VHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgIHRpdGxlOiBzcG90aWZ5RGF0YS50aXRsZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgJHtzcG90aWZ5RGF0YS5uYW1lfSBieSAke3Nwb3RpZnlEYXRhLmFydGlzdHMuXG4gICAgICAgICAgICBtYXAoKG0pID0+IG0ubmFtZSkuXG4gICAgICAgICAgICBqb2luKCcsICcpfWAsXG4gICAgICAgICAgICBhdXRob3I6IHNwb3RpZnlEYXRhLmFydGlzdHNbMF0/Lm5hbWUgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgIHVybDogc3BvdGlmeURhdGEuaWQgP1xuICAgICAgICAgICAgYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS90cmFjay8ke3Nwb3RpZnlEYXRhLmlkfWAgOlxuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICB0aHVtYm5haWw6XG4gICAgICAgICAgICBzcG90aWZ5RGF0YS5jb3ZlckFydD8uc291cmNlcz8uWzBdPy51cmwgfHxcbiAgICAgICAgICAgICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShcbiAgICAgICAgICAgICAgVXRpbC5wYXJzZU1TKHNwb3RpZnlEYXRhLmR1cmF0aW9uID8/IHNwb3RpZnlEYXRhLm1heER1cmF0aW9uID8/IDApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc3BvdGlmeVRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbc3BvdGlmeVRyYWNrXSB9O1xuICAgICAgICB9XG4gICAgICBjYXNlIFF1ZXJ5VHlwZS5TUE9USUZZX1BMQVlMSVNUOntcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBxdWVyeVR5cGUsIGlkIH0gPSB0aGlzLnBhcnNlKHF1ZXJ5KTtcbiAgICAgICAgICAgIGlmIChxdWVyeVR5cGUgIT09ICdwbGF5bGlzdCcpIHRocm93ICdlcnInO1xuXG4gICAgICAgICAgICBjb25zdCBzcG90aWZ5UGxheWxpc3QgPSBhd2FpdCB0aGlzLmludGVybmFsLmdldFBsYXlsaXN0KGlkKTtcbiAgICAgICAgICAgIGlmICghc3BvdGlmeVBsYXlsaXN0KSB0aHJvdyAnZXJyJztcblxuICAgICAgICAgICAgY29uc3QgcGxheWxpc3QgPSBuZXcgUGxheWxpc3QodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICB0aXRsZTogc3BvdGlmeVBsYXlsaXN0Lm5hbWUsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzcG90aWZ5UGxheWxpc3QubmFtZSA/PyAnJyxcbiAgICAgICAgICAgICAgdGh1bWJuYWlsOlxuICAgICAgICAgICAgICBzcG90aWZ5UGxheWxpc3QudGh1bWJuYWlsID8/XG4gICAgICAgICAgICAgICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgICB0eXBlOiAncGxheWxpc3QnLFxuICAgICAgICAgICAgICBzb3VyY2U6ICdzcG90aWZ5JyxcbiAgICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogc3BvdGlmeVBsYXlsaXN0LmF1dGhvciA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgIHVybDogbnVsbCBhcyB1bmtub3duIGFzIHN0cmluZ1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICAgICAgICBpZDogc3BvdGlmeVBsYXlsaXN0LmlkLFxuICAgICAgICAgICAgICB1cmw6IHNwb3RpZnlQbGF5bGlzdC51cmwgfHwgcXVlcnksXG4gICAgICAgICAgICAgIHJhd1BsYXlsaXN0OiBzcG90aWZ5UGxheWxpc3RcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbGF5bGlzdC50cmFja3MgPSBzcG90aWZ5UGxheWxpc3QudHJhY2tzLm1hcCgoc3BvdGlmeURhdGEpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZGF0YTogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBzcG90aWZ5RGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7c3BvdGlmeURhdGEudGl0bGV9IGJ5ICR7c3BvdGlmeURhdGEuYXJ0aXN0fWAsXG4gICAgICAgICAgICAgICAgYXV0aG9yOiBzcG90aWZ5RGF0YS5hcnRpc3QgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICB1cmw6IHNwb3RpZnlEYXRhLnVybCxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6XG4gICAgICAgICAgICAgICAgc3BvdGlmeURhdGEudGh1bWJuYWlsIHx8XG4gICAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShcbiAgICAgICAgICAgICAgICAgIFV0aWwucGFyc2VNUyhzcG90aWZ5RGF0YS5kdXJhdGlvbiA/PyAwKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBRdWVyeVR5cGUuU1BPVElGWV9TT05HLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc3BvdGlmeURhdGEsXG4gICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBkYXRhLmV4dHJhY3RvciA9IHRoaXM7XG4gICAgICAgICAgICAgIGRhdGEucGxheWxpc3QgPSBwbGF5bGlzdDtcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9KSBhcyBUcmFja1tdO1xuXG4gICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdCwgdHJhY2tzOiBwbGF5bGlzdC50cmFja3MgfTtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIGNvbnN0IHNwb3RpZnlQbGF5bGlzdDogU3BvdGlmeVBsYXlsaXN0IHwgdm9pZCA9IGF3YWl0IHRoaXMuX2xpYi5cbiAgICAgICAgICAgIGdldERhdGEocXVlcnksIGNvbnRleHQucmVxdWVzdE9wdGlvbnMgYXMgdW5rbm93biBhcyBSZXF1ZXN0SW5pdCkuXG4gICAgICAgICAgICBjYXRjaChVdGlsLm5vb3ApO1xuICAgICAgICAgICAgaWYgKCFzcG90aWZ5UGxheWxpc3QpIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0ID0gbmV3IFBsYXlsaXN0KHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgdGl0bGU6IHNwb3RpZnlQbGF5bGlzdC5uYW1lID8/IHNwb3RpZnlQbGF5bGlzdC50aXRsZSxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHNwb3RpZnlQbGF5bGlzdC50aXRsZSA/PyAnJyxcbiAgICAgICAgICAgICAgdGh1bWJuYWlsOlxuICAgICAgICAgICAgICBzcG90aWZ5UGxheWxpc3QuY292ZXJBcnQ/LnNvdXJjZXM/LlswXT8udXJsID8/XG4gICAgICAgICAgICAgICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgICB0eXBlOiBzcG90aWZ5UGxheWxpc3QudHlwZSxcbiAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHNwb3RpZnlQbGF5bGlzdC5zdWJ0aXRsZSA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgIHVybDogbnVsbCBhcyB1bmtub3duIGFzIHN0cmluZ1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICAgICAgICBpZDogc3BvdGlmeVBsYXlsaXN0LmlkLFxuICAgICAgICAgICAgICB1cmw6IHNwb3RpZnlQbGF5bGlzdC5pZCA/XG4gICAgICAgICAgICAgIGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vcGxheWxpc3QvJHtzcG90aWZ5UGxheWxpc3QuaWR9YCA6XG4gICAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgICByYXdQbGF5bGlzdDogc3BvdGlmeVBsYXlsaXN0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGxheWxpc3QudHJhY2tzID0gc3BvdGlmeVBsYXlsaXN0LnRyYWNrTGlzdC5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZGF0YTogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBtLnRpdGxlID8/ICcnLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtLnRpdGxlID8/ICcnLFxuICAgICAgICAgICAgICAgIGF1dGhvcjogbS5zdWJ0aXRsZSA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgIHVybDogbS51aWQgPyBgaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3RyYWNrcy8ke20udWlkfWAgOiBxdWVyeSxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6XG4gICAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMobS5kdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgIHBsYXlsaXN0LFxuICAgICAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ3Nwb3RpZnlTb25nJyxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgc291cmNlOiBtLFxuICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbSxcbiAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGRhdGEuZXh0cmFjdG9yID0gdGhpcztcbiAgICAgICAgICAgICAgZGF0YS5wbGF5bGlzdCA9IHBsYXlsaXN0O1xuICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIH0pIGFzIFRyYWNrW107XG5cbiAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0LCB0cmFja3M6IHBsYXlsaXN0LnRyYWNrcyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgY2FzZSBRdWVyeVR5cGUuU1BPVElGWV9BTEJVTTp7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcXVlcnlUeXBlLCBpZCB9ID0gdGhpcy5wYXJzZShxdWVyeSk7XG4gICAgICAgICAgICBpZiAocXVlcnlUeXBlICE9PSAnYWxidW0nKSB0aHJvdyAnZXJyJztcblxuICAgICAgICAgICAgY29uc3Qgc3BvdGlmeUFsYnVtID0gYXdhaXQgdGhpcy5pbnRlcm5hbC5nZXRBbGJ1bShpZCk7XG4gICAgICAgICAgICBpZiAoIXNwb3RpZnlBbGJ1bSkgdGhyb3cgJ2Vycic7XG5cbiAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0ID0gbmV3IFBsYXlsaXN0KHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgdGl0bGU6IHNwb3RpZnlBbGJ1bS5uYW1lLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogc3BvdGlmeUFsYnVtLm5hbWUgPz8gJycsXG4gICAgICAgICAgICAgIHRodW1ibmFpbDpcbiAgICAgICAgICAgICAgc3BvdGlmeUFsYnVtLnRodW1ibmFpbCA/P1xuICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuc2Nkbi5jby9pL19nbG9iYWwvdHdpdHRlcl9jYXJkLWRlZmF1bHQuanBnJyxcbiAgICAgICAgICAgICAgdHlwZTogJ2FsYnVtJyxcbiAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHNwb3RpZnlBbGJ1bS5hdXRob3IgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICB1cmw6IG51bGwgYXMgdW5rbm93biBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdHJhY2tzOiBbXSxcbiAgICAgICAgICAgICAgaWQ6IHNwb3RpZnlBbGJ1bS5pZCxcbiAgICAgICAgICAgICAgdXJsOiBzcG90aWZ5QWxidW0udXJsIHx8IHF1ZXJ5LFxuICAgICAgICAgICAgICByYXdQbGF5bGlzdDogc3BvdGlmeUFsYnVtXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGxheWxpc3QudHJhY2tzID0gc3BvdGlmeUFsYnVtLnRyYWNrcy5tYXAoKHNwb3RpZnlEYXRhKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGE6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogc3BvdGlmeURhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGAke3Nwb3RpZnlEYXRhLnRpdGxlfSBieSAke3Nwb3RpZnlEYXRhLmFydGlzdH1gLFxuICAgICAgICAgICAgICAgIGF1dGhvcjogc3BvdGlmeURhdGEuYXJ0aXN0ID8/ICdVbmtub3duIEFydGlzdCcsXG4gICAgICAgICAgICAgICAgdXJsOiBzcG90aWZ5RGF0YS51cmwsXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsOlxuICAgICAgICAgICAgICAgIHNwb3RpZnlEYXRhLnRodW1ibmFpbCB8fFxuICAgICAgICAgICAgICAgICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoXG4gICAgICAgICAgICAgICAgICBVdGlsLnBhcnNlTVMoc3BvdGlmeURhdGEuZHVyYXRpb24gPz8gMClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogUXVlcnlUeXBlLlNQT1RJRllfU09ORyxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgc291cmNlOiBzcG90aWZ5RGF0YSxcbiAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgZGF0YS5leHRyYWN0b3IgPSB0aGlzO1xuICAgICAgICAgICAgICBkYXRhLnBsYXlsaXN0ID0gcGxheWxpc3Q7XG4gICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgfSkgYXMgVHJhY2tbXTtcblxuICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3QsIHRyYWNrczogcGxheWxpc3QudHJhY2tzIH07XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICBjb25zdCBhbGJ1bTogU3BvdGlmeUFsYnVtIHwgdm9pZCA9IGF3YWl0IHRoaXMuX2xpYi5cbiAgICAgICAgICAgIGdldERhdGEocXVlcnksIGNvbnRleHQucmVxdWVzdE9wdGlvbnMgYXMgdW5rbm93biBhcyBSZXF1ZXN0SW5pdCkuXG4gICAgICAgICAgICBjYXRjaChVdGlsLm5vb3ApO1xuICAgICAgICAgICAgaWYgKCFhbGJ1bSkgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW10gfTtcblxuICAgICAgICAgICAgY29uc3QgcGxheWxpc3QgPSBuZXcgUGxheWxpc3QodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICB0aXRsZTogYWxidW0ubmFtZSA/PyBhbGJ1bS50aXRsZSxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGFsYnVtLnRpdGxlID8/ICcnLFxuICAgICAgICAgICAgICB0aHVtYm5haWw6XG4gICAgICAgICAgICAgIGFsYnVtLmNvdmVyQXJ0Py5zb3VyY2VzPy5bMF0/LnVybCA/P1xuICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuc2Nkbi5jby9pL19nbG9iYWwvdHdpdHRlcl9jYXJkLWRlZmF1bHQuanBnJyxcbiAgICAgICAgICAgICAgdHlwZTogYWxidW0udHlwZSxcbiAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgIG5hbWU6IGFsYnVtLnN1YnRpdGxlID8/ICdVbmtub3duIEFydGlzdCcsXG4gICAgICAgICAgICAgICAgdXJsOiBudWxsIGFzIHVua25vd24gYXMgc3RyaW5nXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHRyYWNrczogW10sXG4gICAgICAgICAgICAgIGlkOiBhbGJ1bS5pZCxcbiAgICAgICAgICAgICAgdXJsOiBhbGJ1bS5pZCA/XG4gICAgICAgICAgICAgIGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vcGxheWxpc3QvJHthbGJ1bS5pZH1gIDpcbiAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgIHJhd1BsYXlsaXN0OiBhbGJ1bVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBsYXlsaXN0LnRyYWNrcyA9IGFsYnVtLnRyYWNrTGlzdC5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZGF0YTogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBtLnRpdGxlID8/ICcnLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtLnRpdGxlID8/ICcnLFxuICAgICAgICAgICAgICAgIGF1dGhvcjogbS5zdWJ0aXRsZSA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgIHVybDogbS51aWQgPyBgaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3RyYWNrcy8ke20udWlkfWAgOiBxdWVyeSxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6XG4gICAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMobS5kdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgIHBsYXlsaXN0LFxuICAgICAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ3Nwb3RpZnlTb25nJyxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgc291cmNlOiBtLFxuICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbSxcbiAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGRhdGEuZXh0cmFjdG9yID0gdGhpcztcbiAgICAgICAgICAgICAgZGF0YS5wbGF5bGlzdCA9IHBsYXlsaXN0O1xuICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIH0pIGFzIFRyYWNrW107XG5cbiAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0LCB0cmFja3M6IHBsYXlsaXN0LnRyYWNrcyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW10gfTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RyZWFtKGluZm86IFRyYWNrKTogUHJvbWlzZTxFeHRyYWN0b3JTdHJlYW1hYmxlPiB7XG4gICAgaWYgKHRoaXMuX3N0cmVhbSkge1xuICAgICAgY29uc3Qgc3RyZWFtID0gYXdhaXQgdGhpcy5fc3RyZWFtKGluZm8udXJsLCBpbmZvKTtcbiAgICAgIGlmICh0eXBlb2Ygc3RyZWFtID09PSAnc3RyaW5nJykgcmV0dXJuIHN0cmVhbTtcbiAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxuXG4gICAgLy8gbmV3IGFwaVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY29udGV4dC5yZXF1ZXN0QnJpZGdlKGluZm8sIHRoaXMpO1xuXG4gICAgaWYgKCFyZXN1bHQ/LnJlc3VsdCkgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgYnJpZGdlIHRoaXMgdHJhY2snKTtcblxuICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xuICB9XG5cbiAgcHVibGljIHBhcnNlKHE6IHN0cmluZykge1xuICAgIGNvbnN0IFssLCwgcXVlcnlUeXBlLCBpZF0gPSByZS5leGVjKHEpIHx8IFtdO1xuXG4gICAgcmV0dXJuIHsgcXVlcnlUeXBlLCBpZCB9O1xuICB9XG59IiwgIlxuXG5cblxuXG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gLyogQF9fTUFDUk9fXyBnZXRWZXJzaW9uICovXCI3LjEuMFwiOyIsICJpbXBvcnQge1xuICBBcHBsZU11c2ljRXh0cmFjdG9yLFxuICBBdHRhY2htZW50RXh0cmFjdG9yLFxuICBSZXZlcmJuYXRpb25FeHRyYWN0b3IsXG4gIFNvdW5kQ2xvdWRFeHRyYWN0b3IsXG4gIFNwb3RpZnlFeHRyYWN0b3IsXG4gIFZpbWVvRXh0cmFjdG9yIH0gZnJvbVxuJy4vZXh0cmFjdG9ycyc7XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0RXh0cmFjdG9ycyA9IFtcblNvdW5kQ2xvdWRFeHRyYWN0b3IsXG5BdHRhY2htZW50RXh0cmFjdG9yLFxuVmltZW9FeHRyYWN0b3IsXG5SZXZlcmJuYXRpb25FeHRyYWN0b3IsXG5BcHBsZU11c2ljRXh0cmFjdG9yLFxuU3BvdGlmeUV4dHJhY3Rvcl07XG5cblxuZXhwb3J0ICogZnJvbSAnLi9leHRyYWN0b3JzJztcbmV4cG9ydCAqIGFzIEludGVybmFsIGZyb20gJy4vaW50ZXJuYWwnO1xuXG5leHBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uJzsiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFBQSxFQUNFO0FBQUEsRUFLQTtBQUFBLEVBQ0E7QUFBQSxFQUVBO0FBQUEsRUFDQTtBQUFBLE9BQ0Y7QUFDQSxZQUFZLGdCQUFnQjs7O0FDWDVCLE9BQU8sYUFBYTtBQUdiLElBQU0sS0FDYjtBQUNPLElBQU0sUUFBUTtBQWlDZCxTQUFTLHlCQUNoQixRQUNpQztBQUMvQixRQUFNLFdBQVcsT0FBTyxPQUFPLENBQUMsTUFBTTtBQUNwQyxRQUFJLE9BQU8sRUFBRSxXQUFXLFNBQVUsUUFBTyxFQUFFLE9BQU8sWUFBWSxNQUFNO0FBQ3BFLFdBQU8sRUFBRSxFQUFFLGFBQWEsT0FBVSxFQUFFLGdCQUFnQjtBQUFB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QU0sbUJBQU47OztBQzVCQSxJQUFNO0FBQUE7QUFBQSxFQUFxQztBQUFBOzs7QUNHM0MsSUFBTSxvQkFBb0I7QUFBQSxFQUNqQztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQWdCOyIsCiAgIm5hbWVzIjogWyJCYXNlRXh0cmFjdG9yIiwgIlF1ZXJ5VHlwZSIsICJUcmFjayIsICJVdGlsIiwgIkJhc2VFeHRyYWN0b3IiLCAiUXVlcnlUeXBlIiwgIlV0aWwiLCAiVHJhY2siLCAiQmFzZUV4dHJhY3RvciIsICJRdWVyeVR5cGUiLCAiVHJhY2siLCAiVXRpbCIsICJCYXNlRXh0cmFjdG9yIiwgIlF1ZXJ5VHlwZSIsICJVdGlsIiwgIlRyYWNrIiwgIkJhc2VFeHRyYWN0b3IiLCAiUXVlcnlUeXBlIiwgIlRyYWNrIiwgIlV0aWwiLCAiaHR0cCIsICJodHRwcyIsICJodHRwIiwgImh0dHBzIiwgIkJhc2VFeHRyYWN0b3IiLCAiUXVlcnlUeXBlIiwgIlRyYWNrIiwgIlV0aWwiLCAiUGxheWxpc3QiLCAiUXVlcnlUeXBlIiwgIlRyYWNrIiwgIlV0aWwiLCAiQmFzZUV4dHJhY3RvciIsICJyIiwgIm0iLCAicmVzIiwgIkJhc2VFeHRyYWN0b3IiLCAiUXVlcnlUeXBlIiwgIlRyYWNrIiwgIlV0aWwiLCAiUGxheWxpc3QiLCAiQmFzZUV4dHJhY3RvciIsICJQbGF5bGlzdCIsICJRdWVyeVR5cGUiLCAiVHJhY2siLCAiVXRpbCIsICJCYXNlRXh0cmFjdG9yIiwgIlF1ZXJ5VHlwZSIsICJUcmFjayIsICJVdGlsIiwgIlBsYXlsaXN0Il0KfQo=